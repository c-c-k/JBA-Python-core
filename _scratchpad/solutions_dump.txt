
==============================================================================
# Prime number
# Hard
# 5614 users solved this problem. Latest completion was about 1 hour ago. 
# A is_prime number is a number greater than 1 and divisible only by 1 and
# itself. If a number is divisible by any other number, then it's not a
# is_prime number. Determine whether the input number is a is_prime number.

# ---- code start -----

num = int(input())
if num < 2:
    is_prime = False
else:
    is_prime = True
    check_num = 2
    while is_prime:
        if check_num > num // 2: break
        is_prime = num % check_num != 0
        check_num += 1
print('This number is prime' if is_prime else 'This number is not prime')
==============================================================================
# Cat cafÃ©s
# Hard
# 4756 users solved this problem. Latest completion was 42 minutes ago.
# Kitty wants to visit a cat cafÃ©! Help her find the one with the largest
# number of cats. It is guaranteed that all cafÃ©s have a different number of
# cats.
# Input format
# Each string contains a cafÃ©'s cafe_name followed by a space and the number of
# cats in it, e.g. Paws 11, Kittens 9.
# The names would be one-word only. Read input lines until you get a string
# MEOW (without any number).
# Output format
# The cafÃ© with the maximum number of cats.

# ---- code start -----
max_cats = 0
top_cafe = ''
while True:
    cafe_info = input().split(sep=' ')
    cafe_name = cafe_info[0]
    if len(cafe_info) != 2:
        if cafe_name == 'MEOW':
            break
        else:
            continue
    cats = int(cafe_info[1])
    if cats > max_cats:
        max_cats = cats
        top_cafe = cafe_name
print(top_cafe)
==============================================================================

# Small scale
# Hard
# 5079 users solved this problem. Latest completion was about 2 hours ago.
# Read lines with floats from the input until you get a single period . that
# signals you to stop.
# Find the minimum of these numbers and print it out.

# ---- code start -----
min_float = 99999999
while True:
    input_str = input()
    if input_str == '.':
        break
    test_float = float(input_str)
    if test_float < min_float:
        min_float = test_float
print(min_float)
==============================================================================

# The mean
# Hard
# 5187 users solved this problem. Latest completion was about 5 hours ago.
# Calculate the arithmetic mean of integer numbers and output it. You will receive the integers on separate lines. The numeric sequence ends with a period ., so stop reading the input on it.
# Don't round your result before outputting it.
# The input will always have at least one number.

# ---- code start -----
num_count = 0
num_sum = 0
while True:
    input_str = input()
    if input_str == '.':
        break
    num_sum += int(input_str)
    num_count += 1
print(num_sum / num_count)
==============================================================================

# Vowels and consonants
# Hard
# 5247 users solved this problem. Latest completion was about 2 hours ago.
# Let's work with texts! You'll get a sequence of characters (a word, a
# sentence or just gibberish). For each character tell if it's a vowel or a
# consonant. If you hit a non-alphabetic symbol, just stop processing.
# The input format:
# One line with N characters.
# We will use letters from the English alphabet. The symbols aeiou are
# considered vowels. Treat the rest of the letters as consonants.
# The output format:
# Print the line vowel if the character is a vowel, and consonant if the
# character is a consonant. Stop printing information at the first
# non-alphabetic symbol.

# ---- code start -----
import string

input_str = input()
valid_characters = string.ascii_letters
vowels = 'aeiou'
for char in input_str:
    if char not in valid_characters:
        break
    if char in vowels:
        print('vowel')
    else:
        print('consonant')
==============================================================================

# Game over
# Hard
# 4942 users solved this problem. Latest completion was about 2 hours ago.
# In online test games, there is usually a limited number of lives: if, for
# example, you make 3 mistakes, you lose, and cannot continue with the game.
# Let's try to implement this system.
# Read the line with user answers from the input: C for a correct answer and
# I for an incorrect one, separated by space. Then count the number of
# correct answers (this number is the final score) before a user has reached
# the limit of wrong answers, equal to 3. They lose after their third
# mistake. If they make no more than 2 mistakes, they win. If a user loses
# the game, print "Game over" and their score. If the user wins, print "You
# won" and their score. The message should be printed without quotation
# marks. The message and the score should be printed on separate lines.
# The input format:
# A line with N user answers in a game separated by space
# The output format:
# Game over or You won
# Final score

# ---- code start -----
answers = input().split()
 p
score = 0
mistakes = 0
win = True
for answer in answers:
    if answer == 'C':
        score += 1
    else:
        mistakes += 1
    if mistakes >= 3:
        win = False
        break
print('You won' if win else 'Game over')
print(score)
==============================================================================

#  Process integer input
#  Hard
#  5430 users solved this problem. Latest completion was about 3 hours ago.
#  Write a program that reads integers from the console, one number per line.
#  For each input number you should check:
#  if the number is less than 10, then skip this number;
#  if the number is greater than 100, then stop reading numbers
#  from the console;
#  in other cases, print this number back to the console on a
#  separate line.

# ---- code start -----
valid_numbers = []
while True:
    test_number = int(input())
    if test_number > 100:
        break
    if test_number >= 10:
        valid_numbers.append(test_number)
for number in valid_numbers:
    print(number)
==============================================================================

# Count up the squares
# Hard
# 4979 users solved this problem. Latest completion was about 13 hours ago.
# Write a program that reads integers (one per line) from the console until
# their sum is equal to 0. After that, the program should display the sum of
# the squares of all the entered numbers.
# It is guaranteed that at some point the sum of the entered numbers will be
# equal to 0. After that, you should stop reading the input.
# In case the first integer equals 0, just print out 0 instead of the sum of
# the squares.
# You only need to output the sum of the squares once.

# ---- code start -----
num_sum = 0
square_sum = 0
while True:
    test_number = int(input())
    num_sum += test_number
    square_sum += test_number**2
    if num_sum == 0:
        break
print(square_sum)
==============================================================================

# Palindrome
# Medium
# 5738 users solved this problem. Latest completion was about 16 hours ago.
# A palindrome is a word or a text that reads the same backward as forward.
# Create a program that checks if the word is a palindrome.
# The input format:
# Word that needs to be checked. It is guaranteed that the word will be
# of even length.
# The output format:
# If the word is a palindrome, write Palindrome. Otherwise, write Not
# palindrome.

# ---- code start -----
test_word = input()
for i in range(len(test_word) // 2):
    if test_word[i] != test_word[-(i + 1)]:
        print('Not palindrome')
        break
else:
    print('Palindrome')
==============================================================================

# Party time Problem of the day
# Next problem in: 22h 17m 23s
# Medium
# 4939 users solved this problem. Latest completion was about 10 hours ago.
# James is hosting a party today. He decided to welcome all new guests
# personally. To remember their names, James kindly asks you to write them
# in a list. Read the names from the input, each on a new line, and stop at
# a single period . that denotes the end of the sequence.
# Print your list and its length (the number of guests) for James.

# ---- code start -----
guest_list = []
while True:
    guest = input()
    if guest == '.':
        break
    guest_list.append(guest)
print(guest_list)
print(len(guest_list))
==============================================================================

# Triple-quoted string
# Medium
# 35677 users solved this problem. Latest completion was about 3 hours ago.
# Create a program that will print this multi-line string containing triple double quotes:
# """
# THIS IS A STRING
# """
# Note: quotes, too, should be printed!

# ---- code start -----
print('''
"""
THIS IS A STRING
"""''')
==============================================================================

# Taking turns
# Medium
# 31761 users solved this problem. Latest completion was about 14 hours ago.
# Write a program that will print the following multi-line string:
# ' '' '''
# ' '' '''
# ' '' '''

# ---- code start -----
print("""' '' '''
' '' '''
' '' '''""")
==============================================================================

# Poetry
# Medium
# 31604 users solved this problem. Latest completion was about 4 hours ago.
# Write a program that will create and print this string from "How The Grinch Stole Christmas":
# Did that stop the old Grinch?
# No! The Grinch simply said,
# "If I can't find a reindeer,
# I'll make one instead!"

# ---- code start -----
print('''Did that stop the old Grinch?
No! The Grinch simply said,
"If I can't find a reindeer,
I'll make one instead!"''')
==============================================================================

# A pyramid!
# Medium
# 28991 users solved this problem. Latest completion was about 6 hours ago.
# Print a four-line string that includes:
# One single quote;
# One single quote, one double quote, and one single quote;
# Five alternating single and double quotes, starting with a single quote;
# Seven alternating single and double quotes, starting with a single quote.
# output should look like this:
# '
# '"'
# '"'"'
# '"'"'"'
# To make the task easier, start your string with three pairs of double quotes
# to indicate the beginning and the end of your string. In this case, you don't
# have to use escaping.

# ---- code start -----
print("""'
'"'
'"'"'
'"'"'"'""")
==============================================================================

# Index of synthesis
# Medium
# 7353 users solved this problem. Latest completion was about 2 hours ago.
# One way to classify the languages of the world is by looking at their
# morphological systems. One classification is based on the index of synthesis
# that reflects the average number of morphemes in a word. The values vary
# between 1 and 4 and there are 3 types of languages according to that system.
# Here they are:
# Type â Index
# Analytic â less than 2
# Synthetic â from 2 to 3 (inclusively)
# Polysynthetic â more than 3
# Write a program that given the index of synthesis determines the type of the language.
# The input format:
#  The value of the index of synthesis.
# The output format:
#  The type of language.

# ---- code start -----
syn_index = float(input())
if syn_index > 3:
    print('Polysynthetic')
elif syn_index >= 2:
    print('Synthetic')
else:
    print('Analytic')
==============================================================================

 # Healthy sleep
 # Medium
 # 7760 users solved this problem. Latest completion was about 1 hour ago.
 # Ann watched a TV program about health and learned that it is recommended to sleep at least AAA hours per day. Oversleeping is also unhealthy and you should not sleep more than BBB hours. Now, Ann sleeps HHH hours per day.
 # Check if Ann's sleep schedule complies with the requirements of that TV program.
 # The input format:
 # The input comprises three strings with variables in the following order: A A A, B B B, H H H.
 # A A A is always less than or equal to B B B.
 # The output format:
 # If Ann sleeps less than AAA hours, output "Deficiency", if she sleeps more than BBB hours, output "Excess".
 # If HHH lies between AAA and BBB, print "Normal".

 # ---- code start -----
 Healthy sleep
Medium
7760 users solved this problem. Latest completion was about 1 hour ago.

Ann watched a TV program about health and learned that it is recommended to sleep at least AAA hours per day. Oversleeping is also unhealthy and you should not sleep more than BBB hours. Now, Ann sleeps HHH hours per day.

Check if Ann's sleep schedule complies with the requirements of that TV program.

The input format:

The input comprises three strings with variables in the following order: A A A, B B B, H H H.

A A A is always less than or equal to B B B.

The output format:

If Ann sleeps less than AAA hours, output "Deficiency", if she sleeps more than BBB hours, output "Excess".

If HHH lies between AAA and BBB, print "Normal".
==============================================================================

H
M
7
A
C
T
T
A
T
I
I
==============================================================================

# Healthy sleep
# Medium
# 7760 users solved this problem. Latest completion was about 1 hour ago.
# Ann watched a TV program about health and learned that it is recommended to
# sleep at least A hours per day. Oversleeping is also unhealthy and you
# should not sleep more than B hours. Now, Ann sleeps H hours per day.
# Check if Ann's sleep schedule complies with the requirements of that TV program.
# The input format:
# The input comprises three strings with variables in the following order: A, B, H.
# A is always less than or equal to B.
# The output format:
# If Ann sleeps less than A hours, output "Deficiency", if she sleeps more than B hours, output "Excess".
# If H lies between A and B, print "Normal".

# ---- code start -----
sleep_min = int(input())
sleep_max = int(input())
sleep_test = int(input())
if sleep_test > sleep_max:
    print('Excess')
elif sleep_test > sleep_min:
    print('Normal')
else:
    print('Deficiency')
==============================================================================

# Particles
# Medium
# 7947 users solved this problem. Latest completion was about 23 hours ago.
# The world of elementary particles is rather complex. There are many
# classes, and they can interact in a rather interesting way.
# Two important characteristics of the elementary particles are the spin and
# the electric charge. Here are some of the elementary particles:
# Particle   Class   Spin    Electric charge
# Strange    Quark   1/2     -1/3
# Charm  Quark   1/2     2/3
# Electron   Lepton  1/2     -1
# Neutrino   Lepton  1/2     0
# Photon     Boson   1   0
# Write a program that returns the particle and its class based on its spin and
# electric charge.
# The input format:
#  Two lines: first the spin of the particle, then its charge. You do NOT have
#  to convert these values to floats.
# The output format:
#  The particle and its class separated by a space.

# ---- code start -----
spin = input()
charge = input()
if spin == '1/2':
    if charge == '-1/3':
        print('Strange Quark')
    elif charge == '2/3':
        print('Charm Quark')
    elif charge == '-1':
        print('Electron Lepton')
    elif charge == '0':
        print('Neutrino Lepton')
else:
    print('Photon Boson')
==============================================================================

# Menu
# Hard
# 6802 users solved this problem. Latest completion was about 11 hours ago.
# Let's say you were asked to create a program for a restaurant: a visitor # #
# enters what kind of food they would like to order and gets back the #
# restaurant's offer.  # The restaurant has just opened so its menu contains
# only a few options:
# pizza: Margherita, Four Seasons, Neapolitan, Vegetarian, Spicy # salad:
# Caesar salad, Green salad, Tuna salad, Fruit salad # soup: Chicken soup,
# Ramen, Tomato soup, Mushroom cream soup
# If the visitors ask for something that is not on the menu, the program should
# write "Sorry, we don't have it on the menu".
# Input: "pizza" # Output: "Margherita, Four Seasons, Neapolitan, Vegetarian,
# Spicy" # Input: "burger" # Output: "Sorry, we don't have it on the menu"

# ---- code start -----



.\{78,\}

/kugql
/.\{78,\}gql
l
==============================================================================

 # Menu Hard 6802 users solved this problem. Latest completion was about 11
 hours ago.  Let's say you were asked to create a program for a restaurant: a
 visitor enters what kind of food they would like to order and gets back the
 restaurant's offer.  The restaurant has just opened so its menu contains only
 a few options: pizza: Margherita, Four Seasons, Neapolitan, Vegetarian, Spicy
 salad: Caesar salad, Green salad, Tuna salad, Fruit salad soup: Chicken soup,
 Ramen, Tomato soup, Mushroom cream soup If the visitors ask for something that
 is not on the menu, the program should write "Sorry, we don't have it on the
 menu".  Input: "pizza" Output: "Margherita, Four Seasons, Neapolitan,
 Vegetarian, Spicy" Input: "burger" Output: "Sorry, we don't have it on the
 menu"

 # ---- code start -----





==============================================================================

 # Menu
 # Hard
 # 6802 users solved this problem. Latest completion was about 11 hours ago.
 # Let's say you were asked to create a program for a restaurant: a visitor enters what kind of food they would like to order and gets back the restaurant's offer.
 # The restaurant has just opened so its menu contains only a few options:
 #         pizza: Margherita, Four Seasons, Neapolitan, Vegetarian, Spicy
 #             salad: Caesar salad, Green salad, Tuna salad, Fruit salad
 #                 soup: Chicken soup, Ramen, Tomato soup, Mushroom cream soup
 #                 If the visitors ask for something that is not on the menu, the program should write "Sorry, we don't have it on the menu".
 #                 Input: "pizza"
 #                 Output: "Margherita, Four Seasons, Neapolitan, Vegetarian, Spicy"
 #                 Input: "burger"
 #                 Output: "Sorry, we don't have it on the menu"

 # ---- code start -----





==============================================================================

# Menu
# Hard
# 6802 users solved this problem. Latest completion was about 11 hours ago.
# Let's say you were asked to create a program for a restaurant: a visitor
# enters what kind of food they would like to order and gets back the
# restaurant's offer.
# The restaurant has just opened so its menu contains only a few options:
# pizza: Margherita, Four Seasons, Neapolitan, Vegetarian, Spicy
# salad: Caesar salad, Green salad, Tuna salad, Fruit salad
# soup: Chicken soup, Ramen, Tomato soup, Mushroom cream soup
# If the visitors ask for something that is not on the menu, the program should
# write "Sorry, we don't have it on the menu".
# Input: "pizza"
# Output: "Margherita, Four Seasons, Neapolitan, Vegetarian, Spicy"
# Input: "burger"
# Output: "Sorry, we don't have it on the menu"

# ---- code start -----
base_food = input()
if base_food == "pizza":
    print("Margherita, Four Seasons, Neapolitan, Vegetarian, Spicy")
elif base_food == "salad":
    print("Caesar salad, Green salad, Tuna salad, Fruit salad")
elif base_food == "soup":
    print("Chicken soup, Ramen, Tomato soup, Mushroom cream soup")
else:
    print("Sorry, we don't have it on the menu")
==============================================================================

#  Through the doorway
#  Medium
#  959 users solved this problem. Latest completion was 1 day ago.
#  Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
#  The input format:
#      The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
#      The output format:
#          If the box can be carried through the doorway, output "The box can be carried".
#          If it cannot be carried, output "The box cannot be carried".
#          Report a typo
#          Sample Input 1:
#              24
#              21
#              11
#              36
#              80
#              Sample Output 1:
#                  The box can be carried
#                  Sample Input 2:
#                      80
#                      50
#                      80
#                      33
#                      78
#                      Sample Output 2:
#                          The box cannot be carried
#                          Write a program
#                              Code Editor
#                                  IDE
#                                      100 
#                                      1
#                                      2
#                                      3
#                                      4
#                                      5
# 

# ---- code start -----


==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã
# height) through the doorway with dimensions X Ã Y (width Ã height). Write a
# program to check whether it is possible.
# The input format:
# The input comprises five strings with numbers in the following order: A, B,
# C, X, Y. If the size of the doorway is greater than or equal to any two
# dimensions of the box, it is considered that the box can be carried.
# The output format:
# If the box can be carried through the doorway, output "The box can be
# carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start -----


==============================================================================

#  Through the doorway
#  Medium
#  959 users solved this problem. Latest completion was 1 day ago.
#  Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
#  The input format:
#      The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
#      The output format:
#          If the box can be carried through the doorway, output "The box can be carried".
#          If it cannot be carried, output "The box cannot be carried".
#          Report a typo
#          Sample Input 1:
#              24
#              21
#              11
#              36
#              80
#              Sample Output 1:
#                  The box can be carried
#                  Sample Input 2:
#                      80
#                      50
#                      80
#                      33
#                      78
#                      Sample Output 2:
#                          The box cannot be carried
#                          Write a program
#                              Code Editor
#                                  IDE
#                                      100 
#                                      1
#                                      2
#                                      3
#                                      4
#                                      5
# 

# ---- code start -----


==============================================================================

# Through the doorway
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
#cs

==============================================================================

# Through the doorway
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
#cs

==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
# Report a typo
# 
# Sample Input 1:
# 
# 24
# 21
# 11
# 36
# 80
# 
# Sample Output 1:
# 
# The box can be carried
# 
# Sample Input 2:
# 
# 80
# 50
# 80
# 33
# 78
# 
# Sample Output 2:
# 
# The box cannot be carried
# 
# Write a program
# 
# Code Editor
# IDE
# 
# 100 
# 
# 1
# 2
# 3
# 4
# 5
^# \d\n# \(\n\|\D\)
# 
# 
# # line3
# 
# 
==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
# Report a typo
# 
# Sample Input 1:
# 
# 24
# 21
# 11
# 36
# 80
# 
# Sample Output 1:
# 
# The box can be carried
# 
# Sample Input 2:
# 
# 80
# 50
# 80
# 33
# 78
# 
# Sample Output 2:
# 
# The box cannot be carried
# 
# Write a program
# 
# Code Editor
# IDE
# 
# 100 
# 
# 1
# 2
# 3
# 4
# 5
# 
# 
# # line3
# 
# 
# 
==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
# Report a typo
# 
# Sample Input 1:
# 
# 24
# 21
# 11
# 36
# 80
# 
# Sample Output 1:
# 
# The box can be carried
# 
# Sample Input 2:
# 
# 80
# 50
# 80
# 33
# 78
# 
# Sample Output 2:
# 
# The box cannot be carried
# 
# Write a program
# 
# Code Editor
# IDE
# 
# 100 
# 
# 1
# 2
# 3
# 4
# 5
# 
# 
# # line3
# 
# 
# 
==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
# Report a typo
# 
# Sample Input 1:
# 
# 24
# 21
# 11
# 36
# 80
# 
# Sample Output 1:
# 
# The box can be carried
# 
# Sample Input 2:
# 
# 80
# 50
# 80
# 33
# 78
# 
# Sample Output 2:
# 
# The box cannot be carried
# 
# Write a program
# 
# Code Editor
# IDE
# 
# 100 
# 
# 1
# 2
# 3
# 4
# 5


# line3


==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
# Report a typo
# 
# Sample Input 1:
# 
# 24
# 21
# 11
# 36
# 80
# 
# Sample Output 1:
# 
# The box can be carried
# 
# Sample Input 2:
# 
# 80
# 50
# 80
# 33
# 78
# 
# Sample Output 2:
# 
# The box cannot be carried
# 
# Write a program
# 
# Code Editor
# IDE
# 
# 100 
# 
# 1
# 2
# 3
# 4
# 5


# line3


==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start ----
# line3

==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã
# height) through the doorway with dimensions X Ã Y (width Ã height). Write a
# program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B,
# C, X, Y. If the size of the doorway is greater than or equal to any two
# dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be
# carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start ----
# line3

==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã
# height) through the doorway with dimensions X Ã Y (width Ã height). Write a
# program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B,
# C, X, Y. If the size of the doorway is greater than or equal to any two
# dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be
# carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start ----

==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã
# height) through the doorway with dimensions X Ã Y (width Ã height). Write a
# program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B,
# C, X, Y. If the size of the doorway is greater than or equal to any two
# dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be
# carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start ----
# line3

==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã height) through the doorway with dimensions X Ã Y (width Ã height). Write a program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B, C, X, Y. If the size of the doorway is greater than or equal to any two dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be carried".
# If it cannot be carried, output "The box cannot be carried".
# Report a typo
# 
# Sample Input 1:
# 
# 24
# 21
# 11
# 36
# 80
# 
# Sample Output 1:
# 
# The box can be carried
# 
# Sample Input 2:
# 
# 80
# 50
# 80
# 33
# 78
# 
# Sample Output 2:
# 
# The box cannot be carried
# 
# Write a program
# 
# Code Editor
# IDE
# 
# 100 
 
 1
 2
 3
 4
 5
1
1
1
1
1
==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã
# height) through the doorway with dimensions X Ã Y (width Ã height). Write a
# program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B,
# C, X, Y. If the size of the doorway is greater than or equal to any two
# dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be
# carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start ----
 # line3

==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã
# height) through the doorway with dimensions X Ã Y (width Ã height). Write a
# program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B,
# C, X, Y. If the size of the doorway is greater than or equal to any two
# dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be
# carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start ----
# line3

==============================================================================

# Through the doorway
# Medium
# 959 users solved this problem. Latest completion was 1 day ago.
# 
# Suppose you want to carry a box with dimensions A Ã B Ã C (length Ã width Ã
# height) through the doorway with dimensions X Ã Y (width Ã height). Write a
# program to check whether it is possible.
# 
# The input format:
# The input comprises five strings with numbers in the following order: A, B,
# C, X, Y. If the size of the doorway is greater than or equal to any two
# dimensions of the box, it is considered that the box can be carried.
# 
# The output format:
# If the box can be carried through the doorway, output "The box can be
# carried".
# If it cannot be carried, output "The box cannot be carried".

# ---- code start ----
box_length = int(input())
box_width = int(input())
box_height = int(input())
door_width = int(input())
door_height = int(input())
if box_height <= door_height and box_width <= door_width:
    print("The box can be carried")
elif box_height <= door_height and box_length <= door_width:
    print("The box can be carried")
elif box_width <= door_height and box_length <= door_width:
    print("The box can be carried")
elif box_width <= door_height and box_height <= door_width:
    print("The box can be carried")
elif box_length <= door_height and box_width <= door_width:
    print("The box can be carried")
elif box_length <= door_height and box_height <= door_width:
    print("The box can be carried")
else:
    print("The box cannot be carried")
==============================================================================

# Coordinates
# Medium
# 7271 users solved this problem. Latest completion was about 13 hours ago.
# 
# Locate a point on the Cartesian coordinate plane: which of the four quadrants
# does a point belong to?
# 
# Read two numbers from the input, not necessarily integers, the first number
# will indicate a position on the X-axis, the second one â on the Y-axis. Let's
# keep referring to the quadrants by Roman numerals, as shown in the picture.
# 
# If the point is the origin (0, 0), print It's the origin! If a point lies on
# the axes, with either x = 0 or y = 0, print One of the coordinates is equal
# to zero!

# ---- code start ----
x = float(input())
y = float(input())
if x * y == 0:
    if x + y == 0:
        print("It's the origin!")
    else:
        print("One of the coordinates is equal to zero!")
elif x * y < 0:
    if x < 0:
        print("II")
    else:
        print("IV")
else:
    if x < 0:
        print("III")
    else:
        print("I")
==============================================================================

# Long live the king
# Medium
# 6237 users solved this problem. Latest completion was 3 days ago.
# 
# Let's imagine a chessboard, the squares on which are marked with coordinates.
# The coordinates are numbers between 1 and 8 inclusively. The first number
# indicates a column, the second one indicates a row.
# 
# The chess king can stand on any square and can move one step horizontally,
# vertically, or diagonally in any direction within the board.
# 
# The input will contain the coordinates on which the king is located. You
# should figure out and print how many moves the figure can make: for example,
# from the position (1, 8), the king can make only 3 moves (right, down,
# diagonally).

# ---- code start ----
col = int(input())
row = int(input())
moves = 8
if col in [1, 8]:
    if row in [1, 8]:
        print(3)
    else:
        print(5)
elif row in [1, 8]:
    print(5)
else:
    print(8)
==============================================================================

# Recommender system
# Medium
# 8331 users solved this problem. Latest completion was about 6 hours ago.
# 
# Write a program that recommends one of the following movies based on the age
# of a user:
# 
# <=16<= 16<=16 "Lion King"
# 
# 17â2517 - 2517â25 "Trainspotting"
# 
# 26â4026 - 4026â40 "Matrix"
# 
# 41â6041 - 6041â60 "Pulp Fiction"
# 
# >60> 60>60 "Breakfast at Tiffany's"
# 
# The user enters their age and the program outputs one title.

# ---- code start ----
age = int(input())
if age <= 16:
    print("Lion King")
elif 16 < age <= 25:
    print("Trainspotting")
elif 25 < age <= 40:
    print("Matrix")
elif 40 < age <= 60:
    print("Pulp Fiction")
else:
    print("Breakfast at Tiffany's")
==============================================================================

# Positive, Negative or Zero
# Medium
# 12429 users solved this problem. Latest completion was about 6 hours ago.
# 
# Write a program that reads an integer number and prints:
# 
# "negative" if the number is less than 0;
# "positive" if the number is greater than 0;
# "zero" if the number equals 0.
# 
# Do not output double quotes.

# ---- code start ----
num = int(input())
if num < 0:
    print("negative")
elif num > 0:
    print("positive")
else:
    print("zero")
==============================================================================

# Calculator
# Hard
# 8622 users solved this problem. Latest completion was about 11 hours ago.
# 
# Let's write a simple calculator!
# 
# It will read 3 lines:
# 
# the first number
# the second number
# the arithmetic operation.
# 
# Numbers are floats!
# 
# The output is the result of the following: first_number operation
# second_number.
# 
# Operations are: +, -, /, *, mod, pow, div.
# mod â modulo operation, i.e. the remainder of the division first_number %
# second_number,
# pow â exponentiation, the first number will be the base and the second â the
# power: first_number ** second_number,
# div â integer division first_number // second_number.
# 
# Note that if the second number is 0 and you want to perform any of the
# operations /, mod, or div, the calculator should say "Division by 0!"
# 
# If you have too many elif branches, you may consider another approach, for
# example, break the code into smaller functions. Since you don't know how to
# do it yet, ignore the code style error about the number of elif branches.
# 

# ---- code start ----
number_1 = float(input())
number_2 = float(input())
no_div_0_ops = ['+', '-', '*', 'pow']
op = input()
if op in no_div_0_ops:
    if op == '+':
        print(number_1 + number_2)
    elif op == '-':
        print(number_1 - number_2)
    elif op == '*':
        print(number_1 * number_2)
    else:
        print(number_1**number_2)
else:
    if number_2 == 0:
        print("Division by 0!")
    else:
        if op == '/':
            print(number_1 / number_2)
        elif op == 'mod':
            print(number_1 % number_2)
        elif op == 'div':
            print(number_1 // number_2)
==============================================================================

# The farm
# Medium
# 7686 users solved this problem. Latest completion was 3 days ago.
# 
# In a farming game, you can buy certain animals for a specific price. As a
# player, you want to buy the most useful (i.e. the most expensive) animal.
# Here are the animals and their prices:
# 
# Item: Price
# 
# Chicken: 23
# 
# Goat: 678
# 
# Pig: 1296
# 
# Cow: 3848
# 
# Sheep: 6769
# 
# Write a program that determines what is the most expensive animal that the
# user can buy with their money and how many of them they can buy.
# 
# Note that you should only find one kind of animal to buy (the most expensive
# one). You don't need to mention any alternative options. For example, if the
# user has 710 coins, your program should output 1 goat, but not 1 goat\n30
# chickens or anything like that.
# 
# The input format:
# 
# The money that the user has.
# 
# The output format:
# 
# How many animals the user can afford, for example, 20 chickens. If the user
# cannot afford any animal, write None.
# 
# Pay attention to the number of nouns. Also, keep in mind that the word
# "sheep" has the irregular plural form "sheep".
# 

# ---- code start ----
money = int(input())
CHIC = 23
GOAT = 678
PIG = 1296
COW = 3848
SHEEP = 6769
if GOAT <= money < SHEEP:
    if money < PIG:
        print('1 goat')
    elif money < COW:
        if money < 2 * PIG:
            print('1 pig')
        else:
            print(str(money // PIG), 'pigs')
    else:
        print('1 cow')
elif money >= SHEEP:
    print(str(money // SHEEP), 'sheep')
elif money >= CHIC:
    if money < 2 * CHIC:
        print('1 chicken')
    else:
        print(str(money // CHIC), 'chickens')
else:
    print('None')
==============================================================================

# What day is it?
# Medium
# 6654 users solved this problem. Latest completion was about 22 hours ago.
# 
# Today the whole world uses the Coordinated Universal Time (UTC) to
# distinguish between the time zones. The UTC is considered to be the 0, and
# the rest of the time zones are expressed using positive or negative offsets
# from the UTC. For instance, London is in the zone UTC+00:00 (or GMT) and
# Moscow is in the zone UTC+3:00.
# 
# There are 14 positive offsets (from UTC+1:00 to UTC+14:00) and 12 negative
# offsets (from UTC-12:00 to UTC-1:00). This also means that at a particular
# hour, three calendar days are observed on the planet. For example, if now
# it's Sunday, 11:30 in the morning in London, then in the time zone with
# +14:00 offset people are already living in the "next day", Monday, because
# their time is 14 hours ahead of London.
# 
# Your task is stated as follows:
# 
# the reference time point is Tuesday, 10:30 in the morning in London
# (UTC+00:00)
# read the input string containing the number and the sign of this number (for
# example, +4, -10). Note, however, that there will be no sign if the number is
# 0. The number is always an integer.
# this number is the offset for some time zone.
# your program should calculate the day of the week in the time zone for which
# you were given the offset. The reference time point for your calculations is
# mentioned above.
# output the day of the week in the given time zone.
# 
# For example, if the input is -11, then, relatively to London, it's "the day
# before" in this time zone, that is, it's still Monday, but if the input is
# +3, then it's Tuesday, the same as in London.
# 
# The input format:
# 
# The value of offset with the sign (e.g. +3 or -9).
# 
# The output format:
# 
# The day of the week in that timezone.

# ---- code start ----
time_offset = int(input())
PLUS_DAY_OFFSET = 14
MINUS_DAY_OFFSET = -11
if time_offset >= PLUS_DAY_OFFSET:
    print('Wednesday')
elif time_offset <= MINUS_DAY_OFFSET:
    print('Monday')
else:
    print('Tuesday')
==============================================================================

# Computer hours
# Medium
# 7806 users solved this problem. Latest completion was about 14 hours ago.
# 
# Write a program that asks a user how long, on average, they spend on a
# computer per day. If it's less than 2 hours, the program should output
# "That's rare nowadays!". If it is 2 hours or more, but less than 4 hours per
# day it should output"This seems reasonable". In any other case, output "Don't
# forget to take breaks!"

# ---- code start ----
pc_time = int(input())
if pc_time < 2:
    print("That's rare nowadays!")
elif pc_time < 4:
    print("This seems reasonable")
else:
    print("Don't forget to take breaks!")
==============================================================================

# Grade
# Medium
# 7264 users solved this problem. Latest completion was about 7 hours ago.
# 
# There are a number of grades you can get in a test: A, B, C, D, F. The
# percentages are as follows:
# 
# A: 90-100%
# 
# B: 80-90%
# 
# C: 70-80%
# 
# D: 60-70%
# 
# F: <60%
# 
# Determine the grade that a student will get based on the student's score and
# the maximum score.
# 
# Note that the upper limit is not included in the range, except for the A
# grade. For example, a student with 60% will get D, with 70% or 79.9% â C, but
# the top score 100% is just A.
# 
# The input format:
# 
# Two lines: the first with a student's score and the second with the maximum.
# 
# The output format:
# 
# The grade of the student.

# ---- code start ----
student_grade = float(input())
max_grade = float(input())
relative_grade = student_grade / max_grade * 100
if relative_grade < 60:
    print("F")
elif relative_grade < 70:
    print("D")
elif relative_grade < 80:
    print("C")
elif relative_grade < 90:
    print("B")
else:
    print("A")
==============================================================================

# The army of units
# Medium
# 7964 users solved this problem. Latest completion was about 8 hours ago.
# 
# In a computer game, each gamer has an army of units.
# 
# Write a program that will classify the army of your enemies corresponding to
# the following rules:
# 
# Units: Category
# 
# less than 1: no army
# 
# from 1 to 9: few
# 
# from 10 to 49: pack
# 
# from 50 to 499: horde
# 
# from 500 to 999: swarm
# 
# 1000 and more: legion
# 
# The program should read the number of units and output the corresponding
# category.

# ---- code start ----
num_units = int(input())
FEW = 1
PACK = 10
HORDE = 50
SWARM = 500
LEGION = 1000
if num_units >= LEGION:
    print('legion')
elif num_units >= SWARM:
    print('swarm')
elif num_units >= HORDE:
    print('horde')
elif num_units >= PACK:
    print('pack')
elif num_units >= FEW:
    print('few')
else:
    print('no army')
==============================================================================

# Latin equivalents
# Medium
# 2820 users solved this problem. Latest completion was about 5 hours ago.
# 
# Imagine you have a text-processing program that doesn't work with the ASCII
# characters. Still, you need to use it and don't have time to correct that
# issue. You've decided to write another program that will replace all the
# letters with ligatures and diacritic marks with their equivalents from the
# Latin alphabet. The list of replacements is the following:
# 
# Ã© -> e
# Ã« -> e
# Ã¡ -> a
# Ã¥ -> aa
# Å -> oe
# Ã¦ -> ae
# 
# Complete the code below so that the function normalize (def is a keyword used
# to declare functions) would take a string with diacritics and return the one
# where all of them have been replaced with the equivalents.

# ---- code start ----
name = input()


def normalize(_name: str):
    replacement_map = [
        ["Ã©", "e"], ["Ã«", "e"], ["Ã¡", "a"],
        ["Ã¥", "aa"], ["Å", "oe"], ["Ã¦", "ae"]]
    new_name = _name
    for replacement in replacement_map:
        new_name = new_name.replace(replacement[0], replacement[1])
    return new_name


print(normalize(name))
==============================================================================

# Preprocessing
# Medium
# 11914 users solved this problem. Latest completion was about 6 hours ago.
# 
# Preprocess an input text:
# 
# delete punctuation symbols (commas, periods, exclamation and question marks
# ,.!?),
# convert all symbols to lowercase.
# 
# Then print your text.
# 
# Punctuation marks appear not only at the end of the input string. You can use
# the following way to remove the punctuation marks: str.replace("!", "").
# Replacing a symbol with an empty string is the same as removing it.

# ---- code start ----
text = input()
invalid_symbols = ",.!?"
for symbol in invalid_symbols:
    text = text.replace(symbol, "")
print(text.lower())
==============================================================================

# Markdown parsing
# Medium
# 10896 users solved this problem. Latest completion was about 7 hours ago.
# 
# Markdown is a special syntax used for text formatting. There are several ways
# to emphasize words using Markdown:
# Typeface   Example
# Italic text    *italics*, _same italics_
# Bold text  **bold**, __same bold__
# Strikethrough text     ~~crossed out~~
# Code snippet   `code`
# 
# Read an input and parse the text so that it doesn't include special symbols
# mentioned in the table ("*_~`") at its beginning and its end.
# Pay attention to the `code` example, ` is not the same as '!
# 
# Do not forget to print the result.

# ---- code start ----
text = input()
INVALID_SYMBOLS = "*_~`"
print(text.strip(INVALID_SYMBOLS))
==============================================================================

# Poster artist
# Medium
# 16318 users solved this problem. Latest completion was about 12 hours ago.
# 
# Imagine that you design film posters for a living. Write a program that
# prints each film title in all caps.

# ---- code start ----
print(input().upper())
==============================================================================

# Exactly 100 times
# Medium
# 9880 users solved this problem. Latest completion was 1 day ago.
# 
# Jane knows that the variable n stores some integer number (for example,
# 12345) and wants to print it exactly 100 times in one line. Help her and
# write down a single line of code that will print number n exactly 100 times.
# 

# ---- code start ----
n = 12345
print(str(n) * 100)
==============================================================================

# Lexical reduplication
# Easy
# 17672 users solved this problem. Latest completion was about 2 hours ago.
# 
# The languages of the world are amazing! Programming languages too, but now we
# will talk about the human ones. In linguistics, repeating a word or part of
# it is called reduplication. This morphological phenomenon is found in
# different languages. Think for a second, and you will definitely come up with
# a couple of examples. Just to name a few: knock-knock, so-so, bye-bye.
# 
# We have a full reduplication here since the entire word is repeated. That's
# the mechanism we want you to implement. Print a word exactly 2 times. The
# spelling rules vary across the globe, so do not separate the halves (that
# will be easy!).
# 

# ---- code start ----
word = input()
print(str(word) * 2)
==============================================================================

# Triangle
# Hard
# 3429 users solved this problem. Latest completion was about 10 hours ago.
# 
# Draw a triangle of a given height, as in the example.
# 

# ---- code start ----
height = int(input())
for num_layer in range(height):
    blocks = num_layer * 2 + 1
    spaces = height - num_layer - 1
    print(''.join([' ' * spaces, '#' * blocks]))
==============================================================================

# Flip
# Hard
# 3976 users solved this problem. Latest completion was about 11 hours ago.
# 
# Let's try to reverse a numeric sequence. Read it from the input and print its
# numbers in reverse order separated by spaces.
# 

# ---- code start ----
print(' '.join(reversed(input().split())))
==============================================================================

# mixedCase
# Hard
# 3579 users solved this problem. Latest completion was about 23 hours ago.
# 
# Convert a text into lowerCamelCase, or mixedCase.
# 
# The input format:
# 
# A lower-cased word or several words separated by spaces.
# 
# The output format:
# 
# Print this text stylized as mixedCase, that is, the first word should be in
# lowercase and all other words â capitalized.

# ---- code start ----
text = input().title()
text = ''.join([text[0].lower(), text[1:]]).replace(' ', '')
print(text.replace(' ', ''))
==============================================================================

# CapWords
# Hard
# 3787 users solved this problem. Latest completion was 1 day ago.
# 
# In Python, the names of classes (you'll learn about them in detail later)
# follow the CapWords convention. Let's convert the input phrase accordingly by
# capitalizing all words and spelling them without underscores in-between.
# 
# The input format:
# 
# A word or phrase, with words separated by underscores, like function and
# variable names in Python.
# 
# You might want to change the case of letters since they are not necessarily
# lowercased.
# 
# The output format:
# 
# The name written in the CapWords fashion.
# 

# ---- code start ----
print(input().replace('_', ' ').lower().title().replace(' ', ''))
==============================================================================

# Find words
# Hard
# 4767 users solved this problem. Latest completion was 1 day ago.
# 
# Find all words that end in "s" and print them together separated by an
# underscore.
# 
# After such words there will be no punctuation marks, you do not need to worry
# about that.

# ---- code start ----
text = input().split()
new_text = []
for word in text:
    if word.endswith('s'):
        new_text.append(word)
print('_'.join(new_text))
==============================================================================

# Spellchecker
# Hard
# 4391 users solved this problem. Latest completion was 1 day ago.
# 
# Write a spellchecker that tells you which words in the sentence are spelled
# incorrectly. Use the dictionary in the code below.
# 
# The input format:
# 
# A sentence. All words are in the lowercase.
# 
# The output format:
# 
# All incorrectly spelled words in the order of their appearance in the
# sentence. If all words are spelled correctly, print OK.

# ---- code start ----
dictionary = ['all', 'an', 'and', 'as', 'closely', 'correct', 'equivocal',
              'examine', 'indication', 'is', 'means', 'minutely', 'or',
              'scrutinize', 'sign', 'the', 'to', 'uncertain']
text = input()
no_bad_words = True
for word in text.split():
    if word not in dictionary:
        no_bad_words = False
        print(word)
if no_bad_words:
    print('OK')
==============================================================================

# Find positions
# Hard
# 4246 users solved this problem. Latest completion was 1 day ago.
# 
# Write a program that reads a sequence of numbers from the first line and the
# number x from the second line. Then it should output all positions of x in
# the numerical sequence.
# 
# The test_item count starts from 0. In case x is not in the sequence, print the
# line "not found" (quotes omitted, lowercased).
# 
# Positions should be displayed in one line, in ascending order of the value.
# 

# ---- code start ----
numbers = input().split()
test_number = input()
positions = []
for test_item in enumerate(numbers):
    if test_item[1] == test_number:
        positions.append(str(test_item[0]))
if positions:
    print(" ".join(positions))
else:
    print("not found")
==============================================================================

# Straight A's
# Medium
# 5448 users solved this problem. Latest completion was about 12 hours ago.
# 
# Write a program that calculates the proportion of students who received grade
# A.
# 
# A five-point rating system with grades A, B, C, D, F is used.
# 
# Input format:
# A string with students' marks separated by space. At least one mark will be
# present.
# 
# Output format:
# A fractional number with exactly two decimal places.
# 
# To format the decimal places use the round(number, places) function.
# 

# ---- code start ----
marks = input()
print(round((marks.count('A') / len(marks.replace(' ', ''))), 2))
==============================================================================

# What day is it?
# Medium
# 6366 users solved this problem. Latest completion was about 6 hours ago.
# 
# Read a date from the input given in one of the following formats: YYYY-MM-DD
# or YYY-MM-DD. Print the year, month and day on separate lines.

# ---- code start ----
print(*input().split('-'), sep='\n')
==============================================================================

# String tricks
# Medium
# 8826 users solved this problem. Latest completion was about 4 hours ago.
# 
# Examine the code and fix the mistakes so that the join() method works.

# ---- code start ----
random_numbers = [1, 22, 333, 4444, 55555]
random_numbers = [str(num) for num in random_numbers]
print("\n".join(random_numbers))
==============================================================================

# Split and join
# Fix the mistakes
# Medium
# 4115 users solved this problem. Latest completion was 2 days ago.
#
# The code below is supposed to find all website addresses (https://, http://,
# www.) in the input text. However, it is not finished. Complete the code and
# print all the addresses in the order in which they appear in the text, each
# on a new line. Mind that str.lower() can help you to convert all characters
# of the string to the lower case.

# ---- code start ----
text = input()
words = text.split()
search_terms = ["https://", "http://", "www."]
for word in words:
    for search_term in search_terms:
        if word.lower().count(search_term):
            print(word)
==============================================================================


# One of the exceptions
# Medium
# 3066 users solved this problem. Latest completion was 1 day ago.
# 
# There is also one interesting feature of the built-in exceptions to be
# mentioned. If you print dir(locals()['__builtins__']), you obtain a list of
# all built-in exceptions and functions that exist in Python. Your task is to
# use the index given in the input and print the name of the exception that
# has this index. Each index in the input corresponds to an exception.

# ---- code start ----
error_num = int(input())
print(dir(locals()['__builtins__'])[error_num])
==============================================================================

# Implementing logic
# Medium
# 4119 users solved this problem. Latest completion was 30 minutes ago.
# 
# Advanced input() handling is used to read input directly into several
# variables, e. g.,
# 
# name, surname = input().split(), but a user still can enter more or fewer
# words.
# 
# In this task, you have to make sure that the user entered the necessary
# amount of words and...
# 
# If there are more or fewer words in the input, print an error: "You need to
# enter exactly 2 words. Try again!"
# If everything's good, greet the user personally.
# 

# ---- code start ----
try:
    name, surname = input().split()
except ValueError:
    print('You need to enter exactly 2 words. Try again!')
else:
    print(' '.join(['Welcome to our party,', name, surname]))
==============================================================================

# Implementing logic
# Medium
# 4119 users solved this problem. Latest completion was 30 minutes ago.
# 
# Advanced input() handling is used to read input directly into several
# variables, e. g.,
# 
# name, surname = input().split(), but a user still can enter more or fewer
# words.
# 
# In this task, you have to make sure that the user entered the necessary
# amount of words and...
# 
# If there are more or fewer words in the input, print an error: "You need to
# enter exactly 2 words. Try again!"
# If everything's good, greet the user personally.
# 

# ---- code start ----
try:
    name, surname = input().split()
except ValueError:
    print('You need to enter exactly 2 words. Try again!')
else:
    print(' '.join(['Welcome to our party,', name, surname]))
==============================================================================

# Modeling situation
# Hard
# 4231 users solved this problem. Latest completion was 1 day ago.
# 
# Your program will have access to the exception_test() function, which can
# throw exceptions.
# 
# You need to write code that runs this function, then catches
# ArithmeticError, AssertionError, ZeroDivisionError exceptions and prints
# the name of the caught exception. Mind the hierarchy of exceptions.
# 
# An example solution that you should send for review:
# 
# try:
# exception_test()
# except Exception:
# print("Exception")
# except BaseException:
# print("BaseException")
# 

# ---- code start ----
try:
    exception_test()
except ZeroDivisionError:
    print('ZeroDivisionError')
except ArithmeticError:
    print('ArithmeticError')
except AssertionError:
    print('AssertionError')
==============================================================================

# Catching built-in exceptions Problem of the day
# Next problem in: 7h 45m 57s
# Medium
# 2663 users solved this problem. Latest completion was 32 minutes ago.
# 
# You know how to catch the built-in exceptions. Right now, try to read two
# numbers (a, b) and find the result of their division. Your main task it to
# catch the ZeroDivisionError. If there's an error, print the following
# message: The Error!. Otherwise, print the result of the division.

# ---- code start ----
a = int(input())
b = int(input())
try:
    result = a / b
except ZeroDivisionError:
    print("The Error!")
else:
    print(result)
==============================================================================

# Zero
# Medium
# 5707 users solved this problem. Latest completion was 40 minutes ago.
# 
# Prevent ZeroDivisionError in the code below. When denominator is 0, print
# the message "Division by zero is not supported". In other cases, print n
# divided by denominator.

# ---- code start ----
n = int(input())
denominator = int(input())
try:
    print(n // denominator)
except ZeroDivisionError:
    print("Division by zero is not supported")
==============================================================================

# Miles away
# Medium
# 15904 users solved this problem. Latest completion was about 1 hour ago.
# 
# Let's take your skill of converting miles to kilometers to the next level!
# Define a function that accepts the number of miles and returns this
# distance in kilometers.
# 
# Assume that one mile is approximately equal to 1.609 kilometers.
# 
# You don't have to handle input, just implement the function.

# ---- code start ----
def mi_to_km(miles: float):
    return miles * 1.609
==============================================================================

# Fahrenheit
# Medium
# 14192 users solved this problem. Latest completion was 39 minutes ago.
# 
# Convert the temperature from Fahrenheit to Celsius in the function below.
# You can use this formula:
# 
# C=(F-32) * 5/9
# 
# Round the returned result to 3 decimal places.
# 
# You don't have to handle input, just implement the function below.
# 
# Also, make sure your function returns the value. Please do NOT print
# anything.
# 

# ---- code start ----
def fahrenheit_to_celsius(fahrenheit):
    return round((fahrenheit - 32) * 5 / 9, 3)
==============================================================================

# The Sum of 2
# Medium
# 15515 users solved this problem. Latest completion was about 1 hour ago.
# 
# Implement a function get_sum(a, b) that will return the sum of two numbers.
# 
# Don't bother about input/output. You just have to implement the function
# which will return a value. Please, do not rename the function.

# ---- code start ----
# implement the function below
def get_sum(a, b):
    return a + b
==============================================================================

# Prevent cheating
# Hard
# 2931 users solved this problem. Latest completion was about 1 hour ago.
# 
# On Hyperskill, we sometimes need to check that the student's code doesn't
# use a particular method. For instance, when the task is to manually
# implement the factorial computation instead of using the factorial()
# function from the math module. How could we do that?
# 
# It is straightforward. We can override math.factorial() to do something
# else - raise an error or print a message to the student. To do so, first,
# we define a function that does what we want (for example, prints a message)
# with the same arguments (since we want to disguise our new function as the
# original one). Then, outside this new function body, we need to assign it
# to math.factorial this way: math.factorial = new_math_factorial (pay
# attention to the absence of parentheses). Now, if the student tries to use
# math.factorial, our custom function will be raised. It happens because when
# multiple functions with the same name exist, the later one always overrides
# the prior.
# 
# In this task, you are a content creator at Hyperskill. Implement the
# example with the factorial yourself. Your program should override
# math.factorial() and make it print the message Don't cheat! instead of
# calculating a factorial.

# ---- code start ----
import math


def new_math_factorial(__x):
    print("Don't cheat!")


math.factorial = new_math_factorial
# don't delete this line, please
math.factorial(23)
==============================================================================

# Captain
# Medium
# 14859 users solved this problem. Latest completion was about 1 hour ago.
# 
# Define a function that will add the word "captain" before the name of a
# person. The function should be named captain_adder, take one argument name,
# and print the string, i.e. it doesn't have to return anything. You don't
# need to call your function, only implement it. Also, you don't need to take
# input, use only the name variable that should be an argument of the
# function.
# 
# Sample Input:
# 
# Jack Sparrow
# 
# Sample Output:
# 
# captain Jack Sparrow

# ---- code start ----
def captain_adder(name):
    print(" ".join(["captain", name]))
==============================================================================

# Make the function work
# Medium
# 13180 users solved this problem. Latest completion was about 1 hour ago.
# 
# Wow! This problem is kind of tricky. If you're ready to put your thinking
# cap on, brace yourself and good luck! Otherwise, you can skip it for now
# and return any time later!
# 
# The function closest_higher_mod_5 takes exactly one integer argument x and
# returns the smallest integer y such that:
# 
# y is greater than or equal to x,
# y is divisible by 5.
# 
# Correct the last line of the code below to make the function work.
# 

# ---- code start ----
def closest_higher_mod_5(x):
    remainder = x % 5
    if remainder == 0:
        return x
    return x + (5 - remainder)
==============================================================================

# Hero damage
# Medium
# 8502 users solved this problem. Latest completion was about 4 hours ago.
# Let's now take a look at how global variables can help us to save
# information between different function calls.
# 
# Imagine you're writing a program for some video game: you need to calculate
# the damage that the main hero deals to the enemies in one hit. The current
# damage is stored in the global variable hero_damage. Use the power of this
# global and write three functions that change its value:
# 
# double_damage() doubles the damage of the hero
# disarmed() makes the damage equal to 10% of the current value
# power_potion() adds 100 damage points
# 
# The functions are already declared. You only need to replace the pass
# keyword with some code of yours.
# 
# Don't output or return anything, just write the body of the functions.
# Remember how we can change the value of a global variable.

# ---- code start ----
hero_damage = 100


def double_damage():
    global hero_damage
    hero_damage *= 2


def disarmed():
    global hero_damage
    hero_damage *= 0.1


def power_potion():
    global hero_damage
    hero_damage += 100
==============================================================================

# Cities
# Medium
# 13798 users solved this problem. Latest completion was about 7 hours ago.
# 
# Imagine you've created a program that plays the cities game with a user.
# For the game to work, you need to remember the user's city and be able to
# change it. Below is the code that does that, but if you run it as is,
# you'll get an error: you won't be able to access the variable user_city
# outside of the function. Fix this problem by adding one line. Please, don't
# change the rest of the code.

# ---- code start ----
def change_city(new_user_city):
    global user_city
    user_city = new_user_city


change_city("Paris")
print(user_city)
==============================================================================

# The Law of Sines
# Hard
# 355 users solved this problem. Latest completion was 32 minutes ago.
# 
# There is a triangle on the picture below with the following parameters:
# 
# - angle A and sides a and c are unknown;
# 
# - angle B = 35°, angle C = 105°, side b = 7.
# 
# Find the side c using the math module. Print the answer rounded to 1
# decimal place.
# 

# ---- code start ----
import math

angle_b = 35
angle_c = 105
# sum of angles in triangle: A = 180 - B - C
angle_a = 180 - angle_b - angle_c

side_b = 7
# law of sines: b/sin(B) = c/sin(C)
#               c = (b*sin(C))/sin(B)
angle_c = math.radians(angle_c)
angle_b = math.radians(angle_b)
side_c = round((side_b * math.sin(angle_c)) / math.sin(angle_b), 1)
print(side_c)
==============================================================================

# Film
# Medium
# 11315 users solved this problem. Latest completion was about 2 hours ago.
# 
# Write a program that gets information about a movie from the input and
# presents in the following format:
# 
# movie (dir. director) came out in year
# 
# The input format:
# 
# 3 lines: first the title of the movie, then the name of the director and
# then the year of its release.

# ---- code start ----
movie_name = input()
movie_director = input()
movie_year = input()
print(f"{movie_name} (dir. {movie_director}) came out in {movie_year}")
==============================================================================

# Beautify both output and code
# Medium
# 10759 users solved this problem. Latest completion was about 3 hours ago.
# 
# The output should be user-friendly, but the code part is also important.
# Well-structured and readable code is very important for being a good
# programmer. Now it's up to you to decide, which formatting method to
# choose.
# 
# Imagine you need to compose a dynamic URL for every certain user with
# user-specific details. Suppose, you want to send different URLs for every
# user, depending on their name and profession. The base would be something
# like
# 
# "http://example.com/*nickname*/desirable/*profession*/profile", where
# nickname and profession are prompts from a user and are dynamic.
# 
# Read the nickname and profession of the user from the input and print a
# user-specific URL. Don't bother about any rules of composing the URLs and
# just use raw input to accomplish the task.

# ---- code start ----
URL_FORMAT = "http://example.com/{NICKNAME}/desirable/{PROFESSION}/profile"
nickname = input()
profession = input()
print(URL_FORMAT.format(NICKNAME=nickname, PROFESSION=profession))
==============================================================================

# Lucky ticket
# Hard
# 21351 users solved this problem. Latest completion was about 1 hour ago.
# Lucky tickets are a kind of mathematical entertainment. A ticket is
# considered lucky if the sum of the first 3 digits equals the sum of the last
# 3 digits of the ticket number.
# 
# You are supposed to write a program that checks whether the two sums are
# equal. The code snippet below displays "Lucky" if they are and "Ordinary" if
# they are not.
# 
# However, some parts of the code are missing. Fill in the blanks to make it
# work!
# 
# Input: a string of 6 digits.
# 
# Output: either "Lucky" or "Ordinary" (without quotes).
# 
# Make sure that you are NOT concatenating strings. To do this, convert each
# digit in the ticket number to an integer. Don't forget to use proper indices.

# ---- code start ----
# Save the input in this variable
ticket = input()
# Add up the digits for each half_
half_1 = sum(map(int, [ticket[0], ticket[1], ticket[2]]))
half_2 = sum(map(int, [ticket[3], ticket[4], ticket[5]]))
# Thanks to you, this code will work
if half_1 == half_2:
    print("Lucky")
else:
    print("Ordinary")
==============================================================================

# Modifying data
# Medium
# 28556 users solved this problem. Latest completion was about 4 hours ago.
# 
# Lists, unlike strings, are mutable. We can use that to modify their data with
# indexes.
# 
# There is a list planets with the names of the Solar system planets. However,
# instead of the 5th planet, there's an X. Replace it with the real name of the
# 5th planet. Do not forget, the first letter must be a capital one!
# 
# Note that the list planets has already been defined, you just need to change
# one element. Mind its index!
# 

# ---- code start ----
planets[4] = " "
==============================================================================

# Simple program
# Medium
# 3846 users solved this problem. Latest completion was about 2 hours ago.
# 
# Create an argument parser using the argparse module, and name it parser.
# Then, add an argument --number.
# 
# Your program should NOT print anything.

# ---- code start ----
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--number')
==============================================================================

# Capitalize 2.0
# Medium
# 817 users solved this problem. Latest completion was about 15 hours ago.
# 
# Read input twice. Capitalize only the first word in the first string. After
# this, capitalize each word in the second one. Print the resulting strings
# each on a new line.

# ---- code start ----
import string
print(input().capitalize())
print(input().title())
==============================================================================

# Help a friend
# Medium
# 533 users solved this problem. Latest completion was about 23 hours ago.
# 
# You decided to study Python on Hyperskill with your friend. However, they
# couldn't read this topic due to family matters and asked you to brief them.
# You did your best with the theory, but now, it's time to practice. Correct
# the code your friend wrote so it would print a compliment.

# ---- code start ----
import string
template = string.Template(
    "Hi, $name! You look $adjective today! You're doing great!")
name = input()
adjective = input()
compliment = template.substitute(name=name, adjective=adjective)
print(compliment)
==============================================================================

# Write a program that reads a user's name from input and prints the
# following message: Dear <username>! It was really nice to meet you.
# Hopefully, you have a nice day! See you soon, <username>!. Change the word
# <username> with the word that is provided in the input. We recommend using
# string templates from the string module to complete the task.

# ---- code start ----
import string
template = string.Template(
    "Dear $username! It was really nice to meet you. "
    "Hopefully, you have a nice day! See you soon, $username!")
username = input()
print(template.substitute(username=username))
==============================================================================

# Voldemort
# Medium
# 7537 users solved this problem. Latest completion was 1 day ago.
# 
# The function used to set a starting point of the random search
# algorithm is called random.seed() and takes a single integer number.
# Write a program that takes a single number n, sets a seed to n and then
# prints a pseudo-randomly chosen letter from the string "Voldemort".
# 
# The variable n is already defined.

# ---- code start ----
import random
# work with this variable
n = int(input())
random.seed(n)
print(random.choice("Voldemort"))
==============================================================================

# Yoda style
# Medium
# 9583 users solved this problem. Latest completion was about 18 hours ago.
# 
# Everybody wants to speak like master Yoda sometimes. Let's try to
# implement a program that will help us with it.
# 
# First, we turn the string of words into a list using the string.split()
# method.
# 
# Then use the function random.seed(43) and rearrange the obtained sequence.
# 
# To turn the list back into a string, use ' '.join(list).
# 
# Print the message in the end.
# 
# Note: you have to use random.seed(43) in this task!

# ---- code start ----
import random
# your sentence is assigned to the variable
sentence = input().split()
# write your python code below
random.seed(43)
random.shuffle(sentence)
# shows the message
print(' '.join(sentence))
==============================================================================

# Heron's formula
# Medium
# 5947 users solved this problem. Latest completion was 1 day ago.
# 
# Many years ago, when Paul went to school, he did not like using Heron's
# formula to calculate the area of a triangle, because he considered it
# to be very complex. One day he decided to help all the students in his
# school by writing a program that calculated the area of a triangle by
# its three sides.
# 
# However, there was a problem: as Paul did not like the formula, he did
# not memorize it. Help him finish this act of kindness and write the
# program following Heron's formula:
# 
# S=p(p−a)(p−b)(p−c) S=\sqrt{p(p - a)(p - b)(p - c)}
# S=p(p−a)(p−b)(p−c)
# 
# ​ where p=a+b+c2 p=\dfrac{a + b + c}2 p=2a+b+c​ is a
# half-perimeter of the triangle. On the input, the program has integers,
# and the output should be a real number corresponding to the area of the
# triangle.
# 
# Do NOT round the result.

# ---- code start ----
# put your python code here
import math
a = int(input())
b = int(input())
c = int(input())
p = (a + b + c) / 2
s = math.sqrt(p * (p - a) * (p - b) * (p - c))
print(s)
==============================================================================

# Round pi
# Medium
# 12259 users solved this problem. Latest completion was about 7 hours ago.
# 
# Write a code that rounds the number pi to 5 decimal places and prints
# it out.
# 
# We've defined the variable pi for you.

# ---- code start ----
from math import pi
# pi = 3.141592653589793
# put your python code here
precision = 5
print(f"{pi:.{precision}f}")
==============================================================================

# Find beautiful identity
# Medium
# 3748 users solved this problem. Latest completion was 1 day ago.
# 
# Write a function that returns an object whose identity ends with 888.
# 
# Iterate numbers from 0 to 10 000 and check their identity via id() to
# find a value ending with ...888.
# 

# ---- code start ----
def object_with_beautiful_identity():
    for i in range(10_000):
        # Change the next line
        if id(i) % 1000 == 888:
            return i
==============================================================================

# Check the truth
# Medium
# 2423 users solved this problem. Latest completion was 1 day ago.
# 
# Write a function check_values that accepts two values (for example, 0
# and 1, or "string" and []) and checks if both of them are True. To
# achieve this, convert the values via the built-in bool() function.
# 
# If both values are True, then your function should return True,
# otherwise False. Note that you are NOT supposed to call the function,
# just implement it.

# ---- code start ----
def check_values(first_value, second_value):
    return bool(first_value) is True and bool(second_value) is True
==============================================================================

# URL
# Easy
# 4883 users solved this problem. Latest completion was about 9 hours ago.
# 
# Declare a function called create_url(). It should take two arguments host and
# port and return URL in the format "https://{host}:{port}" (without quotation
# marks).
# 
# Set default values for both parameters: a string "localhost" and an integer
# 443 respectively. Called without arguments, the function would return
# "https://localhost:443" (without quotations marks).

# ---- code start ----
def create_url(host="localhost", port=443):
    return f"https://{host}:{port}"

==============================================================================

# Markdown level
# Medium
# 3742 users solved this problem. Latest completion was about 9 hours ago.
# 
# Whoa! This problem is much more complex than the usual one and requires
# knowledge of if statement. If you're feeling up to the challenge, brace
# yourself and good luck! Otherwise, you can skip it for now and return any
# time later
# 
# Markdown syntax is used to format a text. To create a level, you should add
# # in front of a word or phrase. The number of hash signs # corresponds to the
# level level, ranging from 1 to 6:
# 
# # Heading level 1
# ## Heading level 2
# ### Heading level 3
# #### Heading level 4
# ##### Heading level 5
# ###### Heading level 6
# 
# Define a function level() that turns a string into a markdown level. By
# default, it will be a first-level level, but there should be a chance to
# change it to the desired value. However, if the specified level is less than
# 1, return a first-level level. Similarly, if the level is greater than 6,
# think of it as a sixth-level level. Look at these examples:
# 
# level("A")      # Returns "# A"
# level("A", 3)   # Returns "### A"
# level("A", 1)   # Returns "# A"
# level("A", 0)   # Returns "# A"
# level("A", 10)  # Returns "###### A"
# 
# Don't call your function, just implement it!
# 
# NB: Your function should return the result, not print it.

# ---- code start ----
def heading(text, level=1):
    if level < 1:
        level = 1
    elif level > 6:
        level = 6
    return f"{'':#>{level}s} {text}"
==============================================================================

# Tennis tournament
# Medium
# 4498 users solved this problem. Latest completion was 2 days ago.
# 
# Several warm-up matches have been played at the tennis tournament. You have
# data on the victories and losses of some players. Save the names of the
# winners to a list and calculate the total number of victories.
# 
# The input format:
# 
# On the first line, you'll receive the integer n specifying a number of lines.
# 
# The next n lines will look like either Name win or Name loss.
# 
# The output format:
# 
# On the first line, print out the list of all players that have won a match,
# repeat the names if necessary.
# 
# Then output the total number of victories based on your list.
# 

# ---- code start ----
# num_matches = int(input())
# matches = []
# for _ in range(num_matches):
#     match = input().split()
#     matches.append(match)
matches = [input().split() for _ in range(int(input()))]
# print(matches)
# victories = []
# for match in matches:
#     if match[1] == 'win':
#         victories.append(match[0])
victories = [match[0] for match in matches if match[1] == 'win']
print(victories)
print(len(victories))
==============================================================================

# Conditions & nested lists
# Medium
# 5632 users solved this problem. Latest completion was 2 days ago.
# 
# Imagine you have a list of students and their grades for an exam:
# 
# students = [["Jane", "B"], ["Kate", "B"], ["Alex", "C"], ["Elsa", "A"],
# ["Max", "B"], ["Chris", "A"]]
# 
# Select only students with the best grade ("A") and print their names in a
# list. Do all this in one line. We have already created the students variable
# with other names and grades.
# 

# ---- code start ----
# the list "students" is already defined
# students = [["Jane", "B"], ["Kate", "B"], ["Alex", "C"],
#             ["Elsa", "A"], ["Max", "B"], ["Chris", "A"]]
print([student[0] for student in students if student[1] == "A"])
==============================================================================

# Congratulatory letter
# Medium
# 3196 users solved this problem. Latest completion was 1 day ago.
# 
# Imagine that you were instructed to write a congratulatory letter, mentioning
# all the employees of the IT department in it. You know for sure that the
# department has one tester, one project manager, but you don't know exactly
# how many developers are there.
# 
# Define a function congratulations() that lists the names of everyone in the
# letter.
# If the project manager is Alice, the tester is Mike, and the developers are
# Roman and Victoria, then the printed congratulation should look like this:
# 
# Happy New Year! Take care of yourself and your loved ones!
# For:
# Alice
# Mike
# Roman
# Victoria
# 
# Pay attention to the order of names. First mention a project manager, then a
# tester, and then developers. Each name should be on a separate line!
# 
# Note that you do not need to call a function, just implement it.
# 
# You don't need to work with the input: the names of the employees are meant
# to be passed to the function as arguments.

# ---- code start ----
def congratulations(manager, tester, *developers):
    print("Happy New Year! Take care of yourself and your loved ones!\nFor:")
    print(manager, tester, *developers, sep="\n")
==============================================================================

# Test average
# Medium
# 2946 users solved this problem. Latest completion was 3 days ago.
# 
# Imagine that you are a teacher whose students recently wrote a test. However,
# you do not know exactly how many students were in the class at the time of
# writing. Based on the marks you have, you should calculate the average mark
# for this test.
# 
# Define the average_mark() function that returns the average value. The
# function should take a varying number of integers as positional arguments.
# 
# Round the result to one decimal place.
# 
# You are not supposed to call the function, just implement it.
# 

# ---- code start ----
def average_mark(*grades):
    return round(sum(grades) / len(grades), 1)
==============================================================================

# You've got mail!
# Medium
# 4168 users solved this problem. Latest completion was 1 day ago.
# 
# Email addresses usually have the same structure: someone@somewhere.com (or
# any other domain).
# 
# You are working with a database of email addresses from an imaginary email
# service yougotmail.com. Create a program that would separate the local-part
# that precedes the @ sign from the rest of the address.
# 
# The input format:
# 
# The email address. It is stored in the variable email, you do not need to
# work directly with input.
# 
# The output format:
# 
# The local-part of the address.

# ---- code start ----
# write your code here
# remember: the variable email is already defined
# email = "someone@somewhere.com"
print(email[:email.index("@")])
==============================================================================

# Reverse
# Medium
# 5705 users solved this problem. Latest completion was 1 day ago.
# 
# In this task, we have a list numbers = [2, 4, 6, ...] and a line that is
# supposed to choose elements with indices from 4 to 16 inclusively in reverse
# order, but a mistake has been made. Find and fix it.
# 

# ---- code start ----
# the following line reads the list from the input; do not modify it, please
numbers = [int(num) for num in input().split()]
print(numbers[16:3:-1])  # the line with an error
==============================================================================

# 
==============================================================================

# Nested
# Medium
# 7246 users solved this problem. Latest completion was about 3 hours ago.
# 
# Imagine there are three children in a family and they all wrote down what
# they want to be when they grow up:
# 
# children = {'Emily': 'artist', 'Adam': 'astronaut', 'Nancy': 'programmer'}
# 
# Let's say you want to store not only the profession they have chosen but also
# their age: Emily is 5, Adam is 9, and Nancy is 14. To do so, you can create
# nested dictionaries for each key in the outer dictionary.
# 
# For each name, create a nested dictionary with the keys 'profession' and
# 'age', modify the dictionary children, but don't print it.
# 
# NB: write the age as an integer.

# ---- code start ----
# please work with the variable children
children = {'Emily': {'profession': 'artist', 'age': 5},
            'Adam': {'profession': 'astronaut', 'age': 9},
            'Nancy': {'profession': 'programmer', 'age': 14}}
==============================================================================

# We Are What We Eat
# Medium
# 4304 users solved this problem. Latest completion was about 17 hours ago.
# 
# Anthony keeps track of what he eats: he writes down how many calories are in
# his meals. Use the list of dictionaries to calculate the total amount of
# calories per day and print it.
# 
# The sample input will look like:
# 
# meals = [
# {"title": "Oatmeal pancakes with apple and cinnamon", "kcal": 370},
# {"title": "Italian salad with fusilli and ham", "kcal": 320},
# {"title": "Bulgur with vegetables", "kcal": 350},
# {"title": "Curd souffle with lingonberries and ginger", "kcal": 225},
# {"title": "Oatmeal with honey and peanuts", "kcal": 440}]
# 
# The output in this case should be 1705.
# 

# ---- code start ----
# the list "meals" is already defined
# your code here
# meals = [
#     {"title": "Oatmeal pancakes with apple and cinnamon", "kcal": 370},
#     {"title": "Italian salad with fusilli and ham", "kcal": 320},
#     {"title": "Bulgur with vegetables", "kcal": 350},
#     {"title": "Curd souffle with lingonberries and ginger", "kcal": 225},
#     {"title": "Oatmeal with honey and peanuts", "kcal": 440}]

print(sum([meal["kcal"] for meal in meals]))
==============================================================================

# Full name
# Medium
# 5154 users solved this problem. Latest completion was about 4 hours ago.
# 
# Rewrite the code below using the with keyword.
# 
# Make sure to use the same variable names for file objects!

# ---- code start ----
with open('name.txt') as f1, open('surname.txt') as f2, open('full_name.txt', 'w') as f3:
    f3.write(' '.join([f1.read(), f2.read()]))
==============================================================================

# Find the password
# Medium
# 1773 users solved this problem. Latest completion was about 2 hours ago.
# 
# Imagine that you are a hacker and you have got access to a web server written
# in Python. The problem is that it asks for a password that you do not know.
# However, this server is open source so you know that there is the
# wrong_password() function which takes a password and checks it against
# real_password.
# 
# def wrong_password(password):
# return (password == "" or (not password and real_password)) or password !=
# real_password
# 
# You can not access the real_password variable but you can call the
# wrong_password() function and exploit its vulnerability to obtain the
# password. Write your code inside the solve() function. Think about an
# argument that can be passed to the wrong_password() function so that the
# function returns the real_password. Print the result of the wrong_password()
# function.
# 
# Your program should not read any input or call the solve() function, your
# task is to implement it.
# 

# ---- code start ----
def solve():
# Write your code here
    print(wrong_password(False))

==============================================================================

# Merge sorted lists
# Hard
# 1833 users solved this problem. Latest completion was 30 minutes ago.
# 
# The merge_arrays(a, b) function, which is partly implemented below, takes two
# sorted lists of integers, merges them into one sorted list, and returns the
# result. The function should work in the following way: create an empty list c
# which will store the result; keep finding the smallest remaining element in a
# and b and moving it to the list c; stop when there are no elements left in a
# and b.
# 
# Your task is to fill in the gaps so that the function works correctly. Note,
# that during the execution any of the lists a and b can become empty, so
# handle these cases carefully. Try to use non-boolean values in logical
# expressions when possible.
# 
# Your program shouldn't read any input or call the function, just implement
# it.
# 

# ---- code start ----
def merge_arrays(a: list, b: list):
    # "c" will contain the result of merging arrays "a" and "b"
    c = []
    # CHECK that "a" or "b" are not empty
    while a or b:
        # CHECK that "b" is empty, or that "a" and "b" are not empty and compare the
        # elements
        if not b or a and b[0] > a[0]:
            # removing the first element from "a" and adding it to "c"
            c.append(a[0])
            a.pop(0)
        else:
            # removing the first element from "b" and adding it to "c"
            c.append(b[0])
            b.pop(0)
    return c
==============================================================================

# Who is who
# Medium
# 11102 users solved this problem. Latest completion was less than a minute
# ago.
# 
# Below are two classes: Angel and Demon.
# 
# They have certain characteristics that help tell them apart. These
# characteristics are listed as attributes.
# 
# Create instances of these classes and print their attributes, first Angel,
# then Demon. You should print the attributes in this order: color, feature,
# home. Each should be on a separate line.

# ---- code start ----
class Angel:
    color = "white"
    feature = "wings"
    home = "Heaven"

    def __str__(self):
        return "{}\n{}\n{}".format(self.color, self.feature, self.home)


class Demon:
    color = "red"
    feature = "horns"
    home = "Hell"

    def __str__(self):
        return "{}\n{}\n{}".format(self.color, self.feature, self.home)


print(str(Angel()))
print(str(Demon()))
==============================================================================

# Movie night
# Medium
# 9554 users solved this problem. Latest completion was about 5 hours ago.
# 
# Write the class Movie and define the class constructor with such parameters
# as the title, director, and the year of release.
# 
# In the corresponding variables defined below, create such objects as
# "Titanic" (James Cameron, 1997), "Star Wars" (George Lucas, 1977), and
# "Fight Club" (David Fincher, 1999).

# ---- code start ----
class Movie:
    def __init__(self, title, director, year):
        self.title = title
        self.director = director
        self.year = year


titanic = Movie("Titanic", "James Cameron", 1997)
star_wars = Movie("Star Wars", "George Lucas", 1977)
fight_club = Movie("Fight Club", "David Fincher", 1999)
==============================================================================

# Keep on sailing
# Hard
# 7414 users solved this problem. Latest completion was about 6 hours ago.
# 
# Redefine the method sail of our class Ship so that it would take the
# destination and then tell where the ship is going. Call this method on the
# black_pearl object that's defined in the code below and print the returned
# message.
# 
# Note: you should read the destination from input!
# 
# The input format:
# 
# The name of the country or the city where the ship is going.
# 
# The output format:
# 
# The result of the updated sail method: a message structured like
# "The {name of the ship} has sailed for {country/city}!"

# ---- code start ----
# our class Ship
class Ship:
    def __init__(self, name, capacity):
        self.name = name
        self.capacity = capacity
        self.cargo = 0

    # the old sail method that you need to rewrite
    def sail(self, destination):
        return "The {NAME} has sailed for {DESTINATION}!".format(NAME=self.name, DESTINATION=destination)


black_pearl = Ship("Black Pearl", 800)
print(black_pearl.sail(input()))
==============================================================================

# Point
# Medium
# 5380 users solved this problem. Latest completion was 1 day ago.
# 
# Create a class Point that will represent a point in space. Its constructor
# needs two parameters xxx and yyy, the coordinates of a point on the plane.
# The class should have a method dist that takes another instance of Point
# and returns the Euclidean distance between these two points. For Point(x1,
# y1) and Point(x2, y2), calculate the distance according to the formula:
# 
# d=(x1−x2)2+(y1−y2)2d = \sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2}
# d=(x1​−x2​)2+(y1​−y2​)2
# 
# ​Have a look at the following example:
# 
# p1 = Point(1.5, 1)
# p2 = Point(1.5, 2)
# 
# print(p1.dist(p2))  # 1.0
# 
# Just create the class, you won't need to do anything else.

# ---- code start ----
import math


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def dist(self, point_2: "Point"):
        return (
            math.sqrt(pow(point_2.x - self.x, 2) + pow(point_2.y - self.y, 2))
        )
==============================================================================

# Stack class
# Medium
# 4791 users solved this problem. Latest completion was about 7 hours ago.
# 
# Whoa! This problem is much more complex than the usual one and requires
# knowledge of Stack (for example, the names of the methods are not random
# but related to Stack terminology). If you're feeling up to the challenge,
# brace yourself, and good luck! Otherwise, you can skip it for now and
# return any time later.
# 
# Implement your own Stack class in Python.
# 
# It should wrap some built-in Python data structure and implement the
# following methods:
# 
# push(el): push a new element el to the stack
# pop(): remove and return the last element from the stack
# peek(): return the last element without removing it
# is_empty(): check if the stack is empty and return True or False
# 
# Upon initialization, the stack must be empty. You do NOT need to create an
# instance of the class or print anything.
# 

# ---- code start ----
class Stack:
    def __init__(self):
        self.values = []

    def push(self, el):
        self.values.append(el)

    def pop(self):
        if self.is_empty():
            return None
        else:
            return self.values.pop()

    def peek(self):
        if self.is_empty():
            return None
        else:
            return self.values[-1]

    def is_empty(self):
        return not self.values
==============================================================================

# 10 puppies
# Medium
# 7713 users solved this problem. Latest completion was about 3 hours ago.
# 
# You want your program to work in a way that at any given time there can be
# no more than 10 puppies. Define __new__ method so that this restriction is
# placed on the class.
# 

# ---- code start ----
class Puppy:
    n_puppies = 0  # number of created puppies

    @staticmethod
    def __new__(cls):
        if Puppy.n_puppies < 10:
            Puppy.n_puppies += 1
            return super().__new__(cls)
==============================================================================

# Printing books
# Medium
# 6168 users solved this problem. Latest completion was about 4 hours ago.
# 
# Anne is writing a program that deals with the books in a bookstore. She
# created a class Book and defined all the necessary attributes: author, title,
# price, and book_id. She would like to print out information about books in a
# concise and uniform way, but she doesn't know how to do that.
# 
# Help Anne by defining the right method so that she can easily print out
# information about her books in the following format: {title} by {author}.
# ${price}. [{book_id}].
# 
# For instance, if we have Book("George Orwell", "1984", 13.59, 1956789), the
# method should return 1984 by George Orwell. $13.59. [1956789].
# 
# Note that you do NOT need to take the input or print anything.
# 

# ---- code start ----
class Book:
    def __init__(self, author, title, price, book_id):
        self.author = author
        self.title = title
        self.price = price
        self.book_id = book_id

    def __str__(self):
        return "{title} by {author}. ${price}. [{book_id}].".format(
            title=self.title, author=self.author, price=self.price,
            book_id=self.book_id
        )
==============================================================================

# Patients
# Medium
# 6099 users solved this problem. Latest completion was about 4 hours ago.
# 
# The class Patient needs both an unambiguous representation for developers and
# a readable string for users. Here's how they are supposed to look:
# 
# For developers: Object of the class Patient. name: {name}, last_name:
# {last_name}, age: {age}
# For users: {name} {last_name}. {age}
# 
# For example, for object john = Patient("John", "Doe", 50) these
# representations would respectively look like this:
# 
# Object of the class Patient. name: John, last_name: Doe, age: 50
# John Doe. 50
# 
# Create the necessary methods below. Pay attention to spaces and punctuation
# in the strings.
# 

# ---- code start ----
class Patient:
    def __init__(self, name, last_name, age):
        self.name = name
        self.last_name = last_name
        self.age = age

    def __repr__(self):
        return ("Object of the class Patient. "
                "name: {name}, last_name: {last_name}, age: {age}".format(
                    name=self.name, last_name=self.last_name, age=self.age))

    def __str__(self):
        return "For users: {name} {last_name}. {age}".format(
                    name=self.name, last_name=self.last_name, age=self.age)

print("a")
==============================================================================

# SuperRobot
# Medium
# 3593 users solved this problem. Latest completion was about 1 hour ago.
# 
# SuperRobot has been found at the local repair station! It can serve on a
# spaceship, assist in surgery, destroy enemy forces and pilot a ship on its
# own. At least technicians say so...
# 
# For those in doubt check whether this SuperRobot is really a subclass of
# AstromechDroid, MedicalDroid, BattleDroid and PilotDroid (the order is
# important!).
# 
# For each potential parent class print the answers in the True/False format on
# separate lines.

# ---- code start ----
# check whether SuperRobot is a subclass of AstromechDroid,
# MedicalDroid, BattleDroid, and PilotDroid
# the order is IMPORTANT
print(issubclass(SuperRobot, AstromechDroid))
print(issubclass(SuperRobot, MedicalDroid))
print(issubclass(SuperRobot, BattleDroid))
print(issubclass(SuperRobot, PilotDroid))
==============================================================================

# Bittersweet occasion
# Medium
# 3778 users solved this problem. Latest completion was about 1 hour ago.
# 
# Mysterious things have happened on the Hogwarts Express! Someone enchanted a
# food trolley and all the goodies got mixed up on the shelves. While the
# trolley witch is looking for the culprit, you will place Drinks, Pastry and
# Sweets on three respective shelves.
# 
# These three are base classes and have various unknown children: for example,
# PumpkinJuice inherits from Drinks. Write a function that finds a parent class
# for an unknown class (not an instance of a class) stored in the variable
# child and prints out the parent's name.
# 
# Note: all these classes are already created, you don't need to do that
# yourself. You only need to work with the child.
# 

# ---- code start ----
# finish the function
def find_the_parent(child):
    print("Drinks" if issubclass(child, Drinks) else "", end="")
    print("Pastry" if issubclass(child, Pastry) else "", end="")
    print("Sweets" if issubclass(child, Sweets) else "", end="")
==============================================================================

# Exceptions and Comparisons
# Medium
# 1445 users solved this problem. Latest completion was 1 day ago.
# 
# Create a function check_w_letter(word) that checks if the given word contains
# the "w" letter. If it does, raise an error called WordError that you should
# define yourself. If not, return the word.
# 

# ---- code start ----
class WordError(Exception):
    slash = "slash"

    def bang(self):
        print(self.slash)


def check_w_letter(word):
    if "w" in word:
        raise WordError
    return word
==============================================================================

# Raising exceptions
# Medium
# 1380 users solved this problem. Latest completion was 1 day ago.
# 
# Create a function sum_with_exceptions(a, b) that will add two integers. If
# the sum is negative, it should raise an error called NegativeSumError that
# you should define by yourself. If the sum is positive or 0, the function
# should return the sum.
# 

# ---- code start ----
class NegativeSumError(Exception):
    quality_control = "confusing"

    def bang(self):
        print(self.quality_control)


def sum_with_exceptions(a, b):
    sum_ = sum([a, b])
    if sum_ < 0:
        raise NegativeSumError
    return sum_
==============================================================================

# The __str__ method in exceptions
# Medium
# 1461 users solved this problem. Latest completion was about 5 hours ago.
# 
# We have created the exception class called NotInBoundsError:
# 
# class NotInBoundsError(Exception):
# def __str__(self):
# return "There is an error!"
# 
# It prints an error message. The class is already defined in the code, so you
# can use it.
# 
# First, create the function check_integer(num) that checks if the given
# integer lies between 45 and 67. If it does, the function should return the
# integer. If not, the NotInBoundsError should be raised.
# 
# Second, create a new function error_handling(num). It should call the
# check_integer(num) function and use the try-except block to catch the
# NotInBoundsError. If there is an error, print its error message. If there are
# no errors, print the result of the check_integer(num) function.

# ---- code start ----
def check_integer(num):
    if 45 < num < 67:
        return num
    raise NotInBoundsError


def error_handling(num):
    try:
        check_integer(num)
    except NotInBoundsError as err:
        print(err)
    else:
        print(num)

==============================================================================

# ven numbers
# Medium
# 2007 users solved this problem. Latest completion was about 16 hours ago.
# 
# Create a function called even() that takes a number as an argument. If the
# number is even, return it. Otherwise, use the assert keyword.
# 
# You do not need to take any input or call the function yourself.

# ---- code start ----
def even(x):
    assert x % 2 == 0
    return x
==============================================================================

# Checking the bounds
# Medium
# 1910 users solved this problem. Latest completion was about 16 hours ago.
# 
# Define a function bounds() that will take a number as an argument. Return the
# number if it lies between 50 and 70 inclusively. If it lies beyond the range,
# use the assert keyword with the message: "Your number is wrong!".
# 
# You do not need to take any input or call the function yourself.

# ---- code start ----
def bounds(x):
    assert 50 <= x <= 70, "Your number is wrong!"
    return x
==============================================================================

# Correct a mistake
# Medium
# 2941 users solved this problem. Latest completion was 2 days ago.
# 
# The code below solves the following problem — having the numerator and the
# denominator of a fraction, check if the fraction equals 0.5. The program
# should print True or False. If the denominator equals 0, the answer is
# False.
# 
# def compare(numerator, denominator):
# return denominator and numerator / denominator == 0.5
# 
# 
# a = int(input())
# b = int(input())
# 
# print(compare(a, b))
# 
# But this code works incorrectly. Find and correct the mistake, then run the
# code.

# ---- code start ----
def compare(numerator, denominator):
    return bool(denominator) and numerator / denominator == 0.5


a = int(input())
b = int(input())
print(compare(a, b))
==============================================================================

# Octahedron
# Medium
# 4103 users solved this problem. Latest completion was about 22 hours ago.
# 
# A regular octahedron is a three-dimensional geometric shape, a polyhedron
# with eight equal faces and twelve equal edges. Have you ever seen 8-sided
# dice? That's a regular octahedron. In this task you need to calculate its
# area and volume.
# 
# Write a program that reads a positive integer representing the edge length
# of the regular octahedron and prints two values – its area and volume (in
# that order), both rounded to 2 decimal places and split by one space.
# 
# Formula to calculate the area of an octahedron (a is edge length):
# 
# 2∗3∗a22*\sqrt{3} *a ^ 22∗3
# 
# ​∗a2
# 
# Formula to calculate the volume:
# 
# 13∗2∗a3\frac{1}{3}*\sqrt{2}*a ^ 331​∗2
# 
# ​∗a3

# ---- code start ----
from math import sqrt, pow


a = float(input())
area = 2 * sqrt(3) * pow(a, 2)
volume = (sqrt(2) * pow(a, 3)) / 3
print(round(area, 2), round(volume, 2))
==============================================================================

# How long is that word?
# Medium
# 9819 users solved this problem. Latest completion was about 2 hours ago.
# 
# Write a program that calculates the length of a word from the input and
# prints it out together with the word in the format word has N letters.
# There will always be more than one letter in the word.
# 

# ---- code start ----
word = input()
word_length = len(word)
print("{WORD} has {LENGTH:d} letters".format(WORD=word, LENGTH=word_length))

==============================================================================

# Turn into a lambda function
# Medium
# 4225 users solved this problem. Latest completion was about 21 hours ago.
# 
# Re-write the following piece of code using the lambda keyword:
# 
# def func(x):
# if x % 10 == 0:
# return "x ends with 0"
# else:
# return "x doesn't end with 0"
# 
# You are not supposed to handle input or invoke this function. Just re-write
# it!

# ---- code start ----
# Don't forget to make use of lambda functions in your solution
# func = lambda x: "x ends with 0" if x % 10 == 0 else "x doesn't end with 0"  # noqa: E731
def func(x): return "x ends with 0" if x % 10 == 0 else "x doesn't end with 0"
==============================================================================

# Calculating profit
# Medium
# 2495 users solved this problem. Latest completion was about 12 hours ago.
# 
# Imagine that you are doing analytics for some manufacturer.
# 
# You collected the data for the past several months. Production costs for each
# month are stored in the costs list, while total revenues per month are
# collected in a list called revenues. Finally, the names of the months the
# data was collected in are stored in the months list.
# 
# Compute and print out the profit of the manufacturer for each month. The
# output should look as follows:
# 
# Jan 1000
# Feb 1500
# etc.
# 

# ---- code start ----

costs, revenues, months = [2000, 3000], [3000, 4500], ["Jan", "Feb"]
profits = map(lambda data: data[0] - data[1], zip(revenues, costs))
# profits = [revenue - cost for revenue, cost in zip(revenues, costs)]
# print(*[" ".join((month, str(profit)))
#         for month, profit
#         in zip(months, profits)], sep="\n")
for monthly_profit in zip(months, map(str, profits)):
    print(" ".join(monthly_profit))
==============================================================================

# Given two equally-sized vectors v1 and v2, calculate their vector sum by
# adding their coordinates element-wise. The vectors will always be of the same
# dimension. Print out each obtained coordinate on a new line, for example, for
# v1 = (1, 5) and v2 = (2, 3), the result will be as follows:
# 
# 3
# 8
# 
# Assume that the tuples v1 and v2 have been defined in advance and are ready
# to use.

# ---- code start ----
# v1, v2 = (1, 5), (2, 3)
print(*[coord_1 + coord_2 for coord_1, coord_2 in zip(v1, v2)], sep="\n")
==============================================================================

# Pass the password
# Easy
# 1274 users solved this problem. Latest completion was about 13 hours ago.
# 
# Tim chooses a password for social networks so that it be difficult to crack.
# He wrote down the options in a list:
# 
# passwords = ['0vbno0re', 'ad12', 'fgghut', '4qp', 'qwerty']
#
# Now, he wants to determine the level of their security depending on the
# length. A password that has a length of 1 is the most unsafe one, while a
# password of length 10 is considered the best one.
# 
# Given a list of passwords, sort them from the least safe to the safest one.
# As the output, print all passwords together with their length. For the
# example above, you should print:
# 
# 4qp 3
# ad12 4
# fgghut 6
# qwerty 6
# 0vbno0re 8
# 

# ---- code start ----
# the follwing line reads the list from the input, do not modify it, please
passwords = input().split()
# passwords = ['0vbno0re', 'ad12', 'fgghut', '4qp', 'qwerty']
# your code below
output = [{"pass": password, "len": len(password)} for password in passwords]
output.sort(key=lambda entry: entry["len"])
print(*[f"{entry['pass']} {entry['len']}" for entry in output], sep="\n")

==============================================================================

# Sort numbers by the remainder
# Medium
# 813 users solved this problem. Latest completion was about 13 hours ago.
# 
# You are given a list of numbers nums. Sort the list by the remainder of
# dividing by three and print the result. Use a lambda function as key if
# possible.

# ---- code start ----
nums = [int(num) for num in list(input())]
# write your code here
nums.sort(key=lambda num: num % 3)
print(nums)
==============================================================================

# Creating a function
# Medium
# 2712 users solved this problem. Latest completion was about 15 hours ago.
# 
# Now, it's time to create your own function in the shell. Take the function
# my_sqrt() from the theory part as an example and change it so that it returns
# the result of math.sqrt() for integers and floats, the string "The string
# should be converted into a numeric data type" if the passed argument was a
# string, and None for other inputs.
# 
# You can test this function in the shell until it works fine, then copy it
# into the field below, and we'll see if it is correct. Note that you shouldn't
# PRINT anything, just RETURN the correct values.

# ---- code start ----
import math


# Modify this function in the shell and copy the new version here
def my_sqrt(value):
    if type(value) is int or type(value) is float:
        return math.sqrt(value)
    elif type(value) is str:
        return "The string should be converted into a numeric data type"
    else:
        return None
==============================================================================

# A simple interest calculation
# Medium
# 1207 users solved this problem. Latest completion was 1 day ago.
# 
# Below you can find a simple program that performs simple interest
# calculation. The part that asks a user for the needed data has already been
# written for you. Now you need to write the final parts that will do all the
# heavy lifting:
# 
# calculate() should perform interest calculation and return the final interest
# amount and the total sum.
# print_result() should print out the final interest amount and the total sum,
# as shown in the Sample Output below.
# 
# Here is the formula for calculating the interest:
# interest=amount×interest  rate×time100 interest = \frac {amount \times
# interest\;rate \times time}{100}interest=100amount×interestrate×time​
# 
# In the Sample Input below, the first number is the starting amount, followed
# by the interest rate in % and the number of years.
# 
# You do NOT need to call the functions, just complete them!

# ---- code start ----
def calculate(amount, interest_rate, time):
    # your code here
    interest = (amount * interest_rate * time) / 100
    total_amount = amount + interest
    return interest, total_amount


def print_result(interest, total_amount):
    # your code here
    print(f"The interest is: {interest:.1f}")
    print(f"The total amount is: {total_amount:.1f}")
==============================================================================


# Temperature
# Hard
# 8114 users solved this problem. Latest completion was 1 day ago.
# 
# Below you can see a draft of a program for a basic temperature converter from
# Fahrenheit to Celsius and vice versa. You need to finish the program by
# creating a sort of entry point for the program in the function main.
# 
# In this function, you should:
# 
# process the input. The input is a string containing a temperature value and a
# unit of measurement which are separated by a whitespace character. We already
# wrote the code that reads the input and creates the variables, but you still
# need to figure out what the right type is for each of them and convert if
# necessary;
# call the appropriate function depending on what was given in the input;
# print the converted temperature with the new unit.
# 
# Use the examples as a guide.
# 
# You do NOT need to call the function main.

# ---- code start ----
from typing import Callable


def fahrenheit_to_celsius(temps_f: float) -> float:
    temps_c = (temps_f - 32) * 5 / 9
    return round(temps_c, 2)


def celsius_to_fahrenheit(temps_c: float) -> float:
    temps_f = temps_c * 9 / 5 + 32
    return round(temps_f, 2)


def select_converter_function_for_unit(unit: str) -> Callable[[float], float]:
    if unit == 'f':
        return fahrenheit_to_celsius
    else:
        return celsius_to_fahrenheit


def switch_unit(unit: str) -> str:
    if unit == 'f':
        return 'c'
    else:
        return 'f'


def print_temperature(temperature: float, unit: str):
    temperature = round(temperature, 1)
    print(" ".join([str(temperature), unit]))


def main():
    """Entry point of the program."""
    temperature, unit = input().split()  # read the input
    temperature = float(temperature)
    unit_converter = select_converter_function_for_unit(unit)
    temperature = unit_converter(temperature)
    unit = switch_unit(unit)
    print_temperature(temperature, unit)
==============================================================================

# Which type of copy?
# Medium
# 831 users solved this problem. Latest completion was 1 day ago.
# 
# You found a machine that can copy objects. It is a device that takes an
# object and returns its copy. The problem is that you don't know if it creates
# a shallow copy or a deep copy. You should solve this problem.
# 
# To do this, write a function detect_copy() which takes no arguments. From
# this function, you should call the predefined function copying_machine(obj);
# it takes the passed object obj and returns either its shallow copy or its
# deep copy. The copying machine function makes only one type of copy, and your
# function should find this out and return "shallow copy" or "deep copy".
# 
# You do NOT need to read anything from the input, define obj for yourself. For
# example, it can be obj = [[1, 2], [3, 4]].
# 
# You can call copying_machine() in the following way: copy_obj =
# copying_machine(obj).
# 

# ---- code start ----
import copy

# copying_machine = copy.copy
obj = [1, [1, 2], [3, 4]]


def detect_copy():
    copy_obj = copying_machine(obj)
    for element, copy_element in zip(obj, copy_obj):
        if id(element) != id(copy_element):
            return "deep copy"
    return "shallow copy"


# print(detect_copy())
==============================================================================

# Odd or even?
# Medium
# 844 users solved this problem. Latest completion was 19 minutes ago.
# 
# There is a function called is_even(). We do not know its code, but we know
# exactly how it works — given an integer, it returns True if the number is
# even, and False if the number is odd. Write tests for this function (use
# assertTrue and assertFalse).
# 
# In this Code Challenge, you do not need to import the module with the
# function in the beginning of the code. To call the function, just type its
# name, is_even().

# ---- code start ----
# tests for the is_even() function
import unittest


def is_even(num):
    return num % 2 == 0


class TestIsEven(unittest.TestCase):
    __doc__: str

    def test_when_output_true(self):
        self.assertTrue(is_even(2))
        self.__doc__ = self.__doc__

    def test_when_output_false(self):
        self.assertFalse(is_even(1))
        self.__doc__ = self.__doc__

    # def __repr__(self):
    #     return str(self.test_when_output_false()) + str(self.test_when_output_true()) + "hello"


if __name__ == '__main__':
    unittest.main()
==============================================================================

# Match or not match?
# Medium
# 1951 users solved this problem. Latest completion was about 6 hours ago.
# 
# Define the function matched with two arguments, template and string. If
# string matches template return True, otherwise return False.

# ---- code start ----
import re


def matched(template, string):
    return bool(re.match(template, string))
==============================================================================

# Escaping in regexps
# Write the template
# Medium
# 2045 users solved this problem. Latest completion was about 3 hours ago.
# 
# You have a variable named template: set its value in such a way that it
# would match the predefined variable good_string entirely and not match the
# predefined variable bad_string.

# ---- code start ----
import re
good_string = 'You learn Python 3?..'
bad_string = 'You learn Python 3?!.'
template = r'You learn Python 3\?\..'
==============================================================================

# Picky parents
# Medium
# 752 users solved this problem. Latest completion was about 6 hours ago.
# 
# A couple of friends that you know have recently become parents. Moreover,
# they have bought a puppy! However, they are having a hard time coming up
# with a name for it. They have decided that the name should start with any
# letter from B to N and the second character has to be a vowel.
# 
# Write a program that checks whether a name suits these two criteria and
# prints "Suitable!" if a match is found.

# ---- code start ----
import re

print("Suitable!" if re.match(r"[B-N][aeioy]") else "", sep="")
==============================================================================

# Mr. and Ms. Smith
# Medium
# 1191 users solved this problem. Latest completion was about 4 hours ago.
# 
# Let's try to differentiate between some kinds of honorifics. Write a
# regular expression in the variable template in such a way that it would
# match the following strings:
# 
# Mr Smith
# Mr. Smith
# Ms Smith
# Ms. Smith
# 
# Note that your template should not match any other strings (for example,
# Dr. Smith).

# ---- code start ----
import re
# define regex template
template = r'M[rs]\.? Smith'
==============================================================================

# Create
# Medium
# 7024 users solved this problem. Latest completion was about 8 hours ago.
# 
# Let's say you asked your friends to name their favorite flowers: now you know
# that Alex likes 'field flowers', Kate prefers 'daffodil', Eva adores
# 'artichoke flower', and Daniel loves 'tulip'.
# 
# Create a dict with the names as keys and flowers as values and print it.

# ---- code start ----
# create a dict here
liked_flowers = {
    "Alex": 'field flowers',
    "Kate": 'daffodil',
    "Eva": 'artichoke flower',
    "Daniel": 'tulip'
}
# and print it
print(liked_flowers)
==============================================================================

# Making a copy
# Easy
# 1129 users solved this problem. Latest completion was 1 day ago.
# 
# Write the my_copy() function that takes two parameters obj, copy_mode and
# returns a copy of an object. The value of copy_mode may be either "deep
# copy", then you should make a deep copy of the given object, or "shallow
# copy", then your function should return a shallow copy.

# ---- code start ----
import copy


def my_copy(obj, copy_mode):
    if copy_mode == "deep copy":
        return copy.deepcopy(obj)
    return copy.copy(obj)
==============================================================================

# Paint
# Medium
# 8879 users solved this problem. Latest completion was about 4 hours ago.
# 
# Below is the class House. Create a method called paint that takes a color as
# an argument and paints the house that color (i.e. modifies the attribute
# color with the value of the method argument).
# 
# The method doesn't need to return any values or print any messages. You also
# do NOT need to take any input!
# 

# ---- code start ----
class House:
    def __init__(self, floors):
        self.floors = floors
        self.color = ""

    # create the method here
    def paint(self, color):
        self.color = color
==============================================================================

# What year is it?
# Medium
# 1619 users solved this problem. Latest completion was about 12 hours ago.
# 
# Now it is time to practice your regexp writing skills! Write a regular
# expression in the variable template in such a way that it would match the
# years from 2000 to 2019 (including 2019). Note that your template should not
# match any other year or random strings that do not contain any year at all.

# ---- code start ----
import re
# define regex template
template = '20[01]\d'
==============================================================================

# Nursery rhymes
# Hard
# 598 users solved this problem. Latest completion was about 12 hours ago.
# 
# Imagine you have to write a poem for kids about animals. You struggle with
# finding appropriate rhymes for the word bunny. Write a regexp pattern that
# will match the right words: they should be from 4 to 7 letters long and end
# with -nny or -ney. Note that the pattern should only match strings containing
# letters—for example, the string 123nny should not be considered a good
# result.
# 
# Put your regexp in the template variable. You do NOT need to print any
# results.

# ---- code start ----
import re
# put your regex in the variable template
template = "[a-zA-Z]{1,4}n[en]y"
==============================================================================

# Letters of a word
# Medium
# 2725 users solved this problem. Latest completion was 2 days ago.
# 
# Define a generator letters that would generate letters from a given word one
# by one.
# 
# You don't have to handle input or print anything.

# ---- code start ----
def letters(word):
    i = 0
    while i < len(word):
        yield word[i]
        i += 1
==============================================================================

# Squares
# Hard
# 1892 users solved this problem. Latest completion was 2 days ago.
# 
# Define a generator squares that produces an infinite sequence of the squares
# of all natural numbers (1, 4, 9, 16, ...).
# 
# For a given number n, print out the first n elements each on a new line.

# ---- code start ----
def squares():
    i = 1
    while True:
        yield i ** 2
        i += 1


# Don't forget to print out the first n numbers one by one here
n = int(input())
sq_it = squares()
for _ in range(n):
    print(next(sq_it))
==============================================================================

# Fibonacci sequence
# Hard
# 1862 users solved this problem. Latest completion was 2 days ago.
# 
# Fibonacci sequence is a sequence of numbers such that each element is a sum
# of the previous two, and the first two elements are equal to 0 and 1. For
# example, the first 10 numbers in the sequence will look as follows:
# 
# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
# 
# Define a generator that produces the Fibonacci sequence of the given length
# n.
# 
# You don't have to handle the input, just implement the generator function
# called fibonacci.

# ---- code start ----
def fibonacci(n):
    i = 1
    if n <= 0:
        return
    num_1 = 0
    yield num_1
    num_2 = 1
    while i < n:
        yield num_2
        num_sum = num_1 + num_2
        num_1 = num_2
        num_2 = num_sum
        i += 1


print(*fibonacci(10))
==============================================================================

# A list of nodes
# Medium
# 323 users solved this problem. Latest completion was about 8 hours ago.
# 
# Complete the code below. Build an AST of the expression, put all nodes in a
# list, and print the list length.

# ---- code start ----
import ast
expression = "(34 + 6) * (23**2 - 7 + 45**2)"
# put your code here
tree = ast.parse(expression)
node_list = list(ast.walk(tree))
print(len(node_list))
==============================================================================

# The imports
# Hard
# 192 users solved this problem. Latest completion was about 7 hours ago.
# 
# There is a predefined variable code that contains the source code. Write a
# program that will traverse the tree and print the name of each Import. Each
# name should be on a new line.
# 

# ---- code start ----
import ast
from typing import Any
import pathlib

test_path = pathlib.Path("./test.py")
code = test_path.read_text()

tree = ast.parse(code)


# put your code here


class ImportNamePrinter(ast.NodeVisitor):
    def __init__(self):
        super().__init__()
        self.node = None

    # def visit_Import(self, node: ast.Import) -> Any:
    #     for alias in node.names:
    #         print(alias.name)
    #     self.generic_visit(node)

    # def visit_ImportFrom(self, node: ast.Import) -> Any:
    #     print(node.module)
    #     self.generic_visit(node)

    def generic_visit(self, node: ast.AST) -> Any:
        self.node = node
        if isinstance(node, ast.Import):
            print(*(alias.name for alias in node.names), sep="\n")
        elif isinstance(node, ast.ImportFrom):
            print(node.module)
        super().generic_visit(node)


import_name_printer = ImportNamePrinter()
import_name_printer.visit(tree)
==============================================================================


==============================================================================

# Choosing a name
# Medium
# 2650 users solved this problem. Latest completion was about 11 hours ago.
# 
# Young parents are choosing a name for their newborn daughter. They made
# lists of n first and m middle names they like, first_names and middle_names
# respectively. Now they should consider all possible combinations of those
# to find the one they like the most.
# 
# Considering both lists defined, print out the combinations of names the
# parents will be choosing from.
# 
# For example, given first_names = ['Anna', 'Catarina'] and middle_names =
# ['Luisa', 'Maria'], the output should look like
# 
# Anna Luisa
# Anna Maria
# Catarina Luisa
# Catarina Maria
# 
# Use the functionality from the itertools module to solve this problem.
# 

# ---- code start ----
import itertools
# first_names = ['Anna', 'Catarina']
# middle_names = ['Luisa', 'Maria']

for name in itertools.product(first_names, middle_names):
    print(" ".join(name))

==============================================================================

# Restaurant
# Medium
# 1932 users solved this problem. Latest completion was 3 days ago.
# 
# Imagine you are having dinner in a very fancy restaurant, but unfortunately
# you don't have a lot of money with you. You want to have a main course, a
# dessert and a drink, but all that together shouldn't cost more than $30.
# 
# The names of the main courses, desserts and drinks are stored in the lists
# main_courses, desserts and drinks respectively. The corresponding prices
# can be found in the lists price_main_courses, price_desserts and
# price_drinks.
# 
# Consider each possible combination of a main course, dessert and a drink
# from those offered by the restaurant and print out only those meals that
# satisfy your budget, along with their total costs.
# 
# For instance, imagine the dishes and prices are as defined below:
# 
# main_courses = ['beef stew', 'fried fish']
# price_main_courses = [28, 23]
# 
# desserts = ['ice-cream', 'cake']
# price_desserts = [2, 4]
# 
# drinks = ['cola', 'wine']
# price_drinks = [3, 10]
# 
# Then, your output should be the following:
# 
# fried fish ice-cream cola 28
# fried fish cake cola 30
# 

# ---- code start ----
import itertools
MONEY = 30
# main_courses = ['beef stew', 'fried fish']
# price_main_courses = [28, 23]
# desserts = ['ice-cream', 'cake']
# price_desserts = [2, 4]
# drinks = ['cola', 'wine']
# price_drinks = [3, 10]

for diner, diner_costs in zip(
    itertools.product(main_courses, desserts, drinks),
    itertools.product(price_main_courses, price_desserts, price_drinks)
):
    diner_total_cost = sum(diner_costs)
    if diner_total_cost <= MONEY:
        print(" ".join(diner), diner_total_cost)
==============================================================================

# Football tournament
# Medium
# 1855 users solved this problem. Latest completion was 24 minutes ago.
# 
# You are organizing a local football tournament. At the initial state, each
# team plays against every other one once.
# 
# The list teams contains the names of the participating teams. Which games
# will be played? Print out all of them.
# 
# For example, if teams = ['Best-ever', 'Not-so-good', 'Amateurs'], your output
# should look like as follows:
# 
# ('Best-ever', 'Not-so-good')
# ('Best-ever', 'Amateurs')
# ('Not-so-good', 'Amateurs')

# ---- code start ----
import itertools
# teams = ['Best-ever', 'Not-so-good', 'Amateurs']
# the variable 'teams' is already defined
for game in itertools.combinations(teams, 2):
    print(game)
==============================================================================

# Flower shop
# Medium
# 1794 users solved this problem. Latest completion was 30 minutes ago.
# 
# A flower shop has various flowers available, all listed in the flower_names
# list. You can buy a bouquet containing one, two or three different kinds of
# flowers.
# 
# Considering the list flower_names defined, print out all possible bouquets
# you can get. Note that the length of flower_names is arbitrary, while
# bouquets you are interested in should only contain from 1 to 3 flowers.
# 
# For example, if flower_names = ['rose', 'tulip', 'sunflower', 'daisy'], your
# answer should look as follows:
# 
# ('rose',)
# ('tulip',)
# ('sunflower',)
# ('daisy',)
# ('rose', 'tulip')
# ('rose', 'sunflower')
# ('rose', 'daisy')
# ('tulip', 'sunflower')
# ('tulip', 'daisy')
# ('sunflower', 'daisy')
# ('rose', 'tulip', 'sunflower')
# ('rose', 'tulip', 'daisy')
# ('rose', 'sunflower', 'daisy')
# ('tulip', 'sunflower', 'daisy')
# 

# ---- code start ----
import itertools
# flower_names = ['rose', 'tulip', 'sunflower', 'daisy']
bouquets = itertools.chain(
    *(itertools.combinations(flower_names, num_flower_types)
        for num_flower_types in range(1, 4)))
for bouquet in bouquets:
    print(bouquet)
==============================================================================

# Translator
# Medium
# 611 users solved this problem. Latest completion was 2 days ago.
# 
# Correct the code below so it would print an English word with its Spanish
# translation.

# ---- code start ----
def translate(**eng_span_dict):
    for eng_word, span_word in eng_span_dict.items():
        print(eng_word, ":", span_word)


words = {
    "mother": "madre",
    "father": "padre",
    "grandmother": "abuela",
    "grandfather": "abuelo"
}

translate(**words)
==============================================================================

# Sort the flowers
# Easy
# 1408 users solved this problem. Latest completion was 5 days ago.
# 
# Mrs. Smith works in a flower shop. Here you can see a table with the flower
# prices:
# flower     price, $
# rose   0.75
# lily   1.3
# tulip  1
# hyacinth   0.70
# 
# Mrs. Smith needs to sort prices in the descending order. Write a program to
# help her!
# 
# The input you will get is a list of numbers, e.g. [0.75, 1.3, 1, 0.70]. The
# result should be this list sorted in the descending order, [1.3, 1, 0.75,
# 0.7] for the example above. Please print the sorted list in the end.

# ---- code start ----
# the following line creates a list from the input, do not modify it, please
prices = [float(price) for price in input().split()]
# your code below
prices.sort(reverse=True)
print(prices)
==============================================================================

# Something in common
# Easy
# 7579 users solved this problem. Latest completion was about 14 hours ago.
# 
# In the code template below, you can see two functions that represent
# different mathematical processes. However, there is a line of code repeated
# in both of these functions. Since this part of code does the same thing in
# both functions, it can be moved from these functions into another separate
# function.
# 
# Find this line of code and create a function with it. Name this function
# common_part. For now, you may leave the existing functions unchanged.
# 
# You do NOT need to work with the input or call any functions.
# 

# ---- code start ----
def calculate_linear(k, b, x):
    y = k * x + b
    return common_part(y)


def calculate_quadratic(a, b, c, x):
    y = (a * x * x) + (b * x) + c
    return common_part(y)


# create function common_part
def common_part(result):
    print("Value of the function equals", result)
    return result
